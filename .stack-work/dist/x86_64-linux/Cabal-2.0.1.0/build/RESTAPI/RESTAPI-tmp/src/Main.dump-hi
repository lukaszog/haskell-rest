
==================== FINAL INTERFACE ====================
2018-06-29 13:17:35.008075 UTC

interface main:Main [family instance module] 8022
  interface hash: b76e79071ba0644947fe57ad0741bd8c
  ABI hash: de9086158b7f81b78d80e2de482df1e7
  export-list hash: 614c0de05fd72ef0e23f784078c67a75
  orphan hash: d9e40e2cce1406858939bcbdbf66e330
  flag hash: 619e24623b6685bd1306e1d281400a8c
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
  Main.migrateAll
  Main.readToDo
  Main.routes
  Main.runDb
  Main.ToDo{Main.ToDo toDoDescription toDoTitle}
  Main.ToDoId
  Database.Persist.Class.PersistEntity.EntityField{Main.ToDoDescription Main.ToDoId Main.ToDoTitle}
  Database.Persist.Class.PersistEntity.Key{Main.ToDoKey unToDoKey}
module dependencies:
package dependencies: aeson-1.2.4.0 aeson-compat-0.3.8 appar-0.1.4
                      array-0.5.2.0 async-2.1.1.1 attoparsec-0.13.2.2
                      attoparsec-iso8601-1.0.0.0 auto-update-0.1.4 base-4.10.1.0
                      base-compat-0.9.3 base64-bytestring-1.0.0.1 binary-0.8.5.1
                      blaze-builder-0.4.1.0 blaze-html-0.9.1.1 blaze-markup-0.8.2.1
                      bsb-http-chunked-0.0.0.2 byteorder-1.0.4 bytestring-0.10.8.2
                      case-insensitive-1.2.0.11 conduit-1.3.0.3 conduit-extra-1.3.0
                      containers-0.5.10.2 data-default-class-0.1.2.0 deepseq-1.4.3.0
                      directory-1.3.0.2 dlist-0.8.0.4 easy-file-0.2.2 exceptions-0.8.3
                      fast-logger-2.4.11 filepath-1.4.1.2 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 hashable-1.2.7.0 haskell-src-exts-1.20.2
                      haskell-src-meta-0.8.0.3 http-api-data-0.3.7.2 http-date-0.0.7
                      http-types-0.12.1 http2-1.6.3 integer-gmp-1.0.1.0
                      integer-logarithms-1.0.2.1 iproute-1.7.5 lifted-base-0.2.3.12
                      microlens-0.4.8.3 microlens-th-0.4.1.3 monad-control-1.0.2.3
                      monad-logger-0.3.28.5 monad-loops-0.4.3 mtl-2.2.2 network-2.6.3.5
                      old-locale-1.0.0.7 old-time-1.1.0.3 path-pieces-0.2.1
                      persistent-2.8.2 persistent-sqlite-2.8.1.2
                      persistent-template-2.5.4 pretty-1.1.3.3 primitive-0.6.4.0
                      psqueues-0.2.7.0 random-1.1 regex-base-0.93.2 regex-compat-0.95.1
                      regex-posix-0.95.2 resource-pool-0.2.3.2 resourcet-1.2.1
                      scientific-0.3.6.2 scotty-0.11.1 silently-1.2.5
                      simple-sendfile-0.2.27 stm-2.4.5.0 stm-chans-3.0.0.4
                      streaming-commons-0.1.19 stringsearch-0.3.6.6 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.2.0
                      transformers-base-0.4.4 unix-2.7.2.2 unix-compat-0.5.0.1
                      unix-time-0.3.8 unliftio-core-0.1.1.0 unordered-containers-0.2.9.0
                      uuid-types-1.0.3 vault-0.3.1.1 vector-0.12.0.1 wai-3.2.1.2
                      wai-extra-3.0.22.0 warp-3.2.22 word8-0.1.3
orphans: regex-posix-0.95.2:Text.Regex.Posix.String
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-base-0.93.2:Text.Regex.Base.Context
         network-2.6.3.5:Network.Socket
         persistent-template-2.5.4:Database.Persist.TH
         haskell-src-exts-1.20.2:Language.Haskell.Exts.Parser
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistUnique
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
         unix-time-0.3.8:Data.UnixTime.Diff stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         haskell-src-exts-1.20.2:Language.Haskell.Exts.SrcLoc
                         haskell-src-exts-1.20.2:Language.Haskell.Exts.Syntax
                         iproute-1.7.5:Data.IP.Addr iproute-1.7.5:Data.IP.Range
                         microlens-0.4.8.3:Lens.Micro.Internal
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         persistent-2.8.2:Database.Persist.Class.PersistConfig
                         persistent-2.8.2:Database.Persist.Class.PersistEntity
                         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.8.2:Database.Persist.Sql.Types.Internal
                         persistent-sqlite-2.8.1.2:Database.Persist.Sqlite
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         scotty-0.11.1:Web.Scotty.Internal.Types tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.2.4.0:Data.Aeson 8577f8a48aa59342c21ea75ad3f7f399
import  -/  aeson-1.2.4.0:Data.Aeson.Encoding.Internal 118f6f255785a14f9fbaae5557ea3e31
import  -/  aeson-1.2.4.0:Data.Aeson.Types.FromJSON 7714ec7282aa30d928f3ccd4dc0ccb8c
import  -/  aeson-1.2.4.0:Data.Aeson.Types.Internal fac85f1bccfed0c745c2be58c41086d2
import  -/  aeson-1.2.4.0:Data.Aeson.Types.ToJSON bf718a3e5911692b9968dde471505305
import  -/  base-4.10.1.0:Control.Applicative 99577a9c463ffe4790a1d37547a345bd
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Control.Monad.IO.Class 9d78cd0f73a837f3c00753bd212b9f2c
import  -/  base-4.10.1.0:Data.Either d7dae5d9bf298dee616e465c14b5d60e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.Proxy da449059b879cc23dde5f0d9cfa646e9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.1.0:GHC.Generics c2a8006cab1f0055555a6c72607a574b
import  -/  base-4.10.1.0:GHC.Int f3b679d79c8ad65bf2b736aa9628303f
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Read 0abfbe8a9b13202e313efc3bc2f2a3e6
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  base-4.10.1.0:Text.ParserCombinators.ReadPrec 043a8dc96e82690dac5a09fb8e44e9bc
import  -/  base-4.10.1.0:Text.Read.Lex aff0420c14a3e1f3bb0ee26cd0646682
import  -/  bytestring-0.10.8.2:Data.ByteString.Builder.Internal 9551b369ef03390b9e7a1c369a514666
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal e154f5ecf6a3cd0a27df93e86ed481d7
import  -/  containers-0.5.10.2:Data.Map.Internal 33ddbf5aa8c0f2ab26fb6dc5be1b1f4c
import  -/  data-default-class-0.1.2.0:Data.Default.Class 278151683eef69e272ea7389d6cf3aaf
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  http-api-data-0.3.7.2:Web.Internal.HttpApiData fa2db34a7dc558ce047aeeff6c8d4384
import  -/  monad-logger-0.3.28.5:Control.Monad.Logger f5077ead012ff6bd6e9f84987e8854aa
import  -/  path-pieces-0.2.1:Web.PathPieces 7df989414bcb9206954cfcefd18ebe7c
import  -/  persistent-2.8.2:Database.Persist 54006025aad3312344665de9bde7df2c
import  -/  persistent-2.8.2:Database.Persist.Class.PersistEntity e2240138fb1e2776214e2bd50dc15250
import  -/  persistent-2.8.2:Database.Persist.Class.PersistField a4c518df36718bbe669bcbb6a130900c
import  -/  persistent-2.8.2:Database.Persist.Class.PersistQuery 1aae5efa77659f47a0cdf0bad9851b94
import  -/  persistent-2.8.2:Database.Persist.Class.PersistStore cba93c2ed96a7f3b1f7caa02669aa69a
import  -/  persistent-2.8.2:Database.Persist.Sql 8789808e8500c72f5e3a27a2d27120df
import  -/  persistent-2.8.2:Database.Persist.Sql.Class 1294ec81f1904a2522fc2afd4db47c3e
import  -/  persistent-2.8.2:Database.Persist.Sql.Migration a991ef61f4243af345139f6bf01ad12b
import  -/  persistent-2.8.2:Database.Persist.Sql.Run 6f9b36d2c7f3db0cd99f302fc27d7955
import  -/  persistent-2.8.2:Database.Persist.Sql.Types f3e47e3ff7dc5985396861771980792d
import  -/  persistent-2.8.2:Database.Persist.Sql.Types.Internal 2771783da15e1ccbd4b072db5bf7e95e
import  -/  persistent-2.8.2:Database.Persist.Types.Base 8936773f2193a225d3ba2fbc5c796cbb
import  -/  persistent-sqlite-2.8.1.2:Database.Persist.Sqlite 2c91788722804e63aaa8457aa825de06
import  -/  persistent-template-2.5.4:Database.Persist.TH 197507254b1058728f54d8f8554323ac
import  -/  resourcet-1.2.1:Control.Monad.Trans.Resource 6a75b3a54d2d1aafb9aed8d24e210dc9
import  -/  resourcet-1.2.1:Control.Monad.Trans.Resource.Internal 54c2de2acbce2240686463f6aa8f8f1b
import  -/  scotty-0.11.1:Web.Scotty 6f8c5c603864b5354d6a99795ddaf1c1
import  -/  text-1.2.3.0:Data.Text 0519455f2b04d2a7315c2959461dd14e
import  -/  text-1.2.3.0:Data.Text.Internal 5d98ec4bb692174ed69de0b9299773d5
import  -/  text-1.2.3.0:Data.Text.Lazy 011116a8574cd66668bef44eacec4c3f
import  -/  time-1.8.0.2:Data.Time 801fb868684a9ca732a26c8ef6b804aa
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base 72493ad4bae90ae550e579739afdded3
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Strict e155b7d342e32020677e3176218b1223
6d9d94a0e35e92a96ec7cbeed3917d82
  $fEqKey ::
    GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  GHC.Int.eqInt64
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <GHC.Types.Bool>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <GHC.Types.Bool>_R))
                  GHC.Int.neInt64
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <GHC.Types.Bool>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <GHC.Types.Bool>_R)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fFromHttpApiDataKey ::
    Web.Internal.HttpApiData.FromHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Web.Internal.HttpApiData.$fFromHttpApiDataInt64_$cparseUrlPiece
                    `cast`
                  (Trans
                       (<Data.Text.Internal.Text>_R
                        ->_R (Data.Either.Either
                                <Data.Text.Internal.Text>_R
                                (Trans
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))))_R)
                       (<Data.Text.Internal.Text>_R
                        ->_R (Data.Either.Either
                                <Data.Text.Internal.Text>_R
                                (Trans
                                     (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))))_R))
                  Web.Internal.HttpApiData.$fFromHttpApiDataInt64_$cparseHeader
                    `cast`
                  (Trans
                       (<Data.ByteString.Internal.ByteString>_R
                        ->_R (Data.Either.Either
                                <Data.Text.Internal.Text>_R
                                (Trans
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))))_R)
                       (<Data.ByteString.Internal.ByteString>_R
                        ->_R (Data.Either.Either
                                <Data.Text.Internal.Text>_R
                                (Trans
                                     (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))))_R))
                  Web.Internal.HttpApiData.$fFromHttpApiDataInt64_$cparseUrlPiece
                    `cast`
                  (Trans
                       (<Data.Text.Internal.Text>_R
                        ->_R (Data.Either.Either
                                <Data.Text.Internal.Text>_R
                                (Trans
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))))_R)
                       (<Data.Text.Internal.Text>_R
                        ->_R (Data.Either.Either
                                <Data.Text.Internal.Text>_R
                                (Trans
                                     (Sym (Main.N:R:KeyToDo[0]))
                                     (Sym (Main.D:R:KeyToDo0[0]))))_R)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fFromJSONKey ::
    Data.Aeson.Types.FromJSON.FromJSON
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Data.Aeson.Types.FromJSON.$fFromJSONInt64_$cparseJSON
                    `cast`
                  (Trans
                       (<Data.Aeson.Types.Internal.Value>_R
                        ->_R (Data.Aeson.Types.Internal.Parser
                                (Trans
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))))_R)
                       (<Data.Aeson.Types.Internal.Value>_R
                        ->_R (Data.Aeson.Types.Internal.Parser
                                (Trans
                                     (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))))_R))
                  Data.Aeson.Types.FromJSON.$fFromJSONInt64_$cparseJSONList
                    `cast`
                  (Trans
                       (<Data.Aeson.Types.Internal.Value>_R
                        ->_R (Data.Aeson.Types.Internal.Parser
                                ([Trans
                                      (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                      (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))])_R)_R)
                       (<Data.Aeson.Types.Internal.Value>_R
                        ->_R (Data.Aeson.Types.Internal.Parser
                                ([Trans
                                      (Sym (Main.N:R:KeyToDo[0]))
                                      (Sym (Main.D:R:KeyToDo0[0]))])_R)_R)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fOrdKey ::
    GHC.Classes.Ord
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Main.$fEqKey
                  GHC.Int.$fOrdInt64_$ccompare
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <GHC.Types.Ordering>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <GHC.Types.Ordering>_R))
                  GHC.Int.ltInt64
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <GHC.Types.Bool>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <GHC.Types.Bool>_R))
                  GHC.Int.leInt64
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <GHC.Types.Bool>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <GHC.Types.Bool>_R))
                  GHC.Int.gtInt64
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <GHC.Types.Bool>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <GHC.Types.Bool>_R))
                  GHC.Int.geInt64
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <GHC.Types.Bool>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <GHC.Types.Bool>_R))
                  GHC.Int.$fOrdInt64_$cmax
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0])))
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans
                                 (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))))
                  GHC.Int.$fOrdInt64_$cmin
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0])))
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R Trans
                                 (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0])))) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPathPieceKey ::
    Web.PathPieces.PathPiece
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Web.PathPieces.$fPathPieceInt64_$sparseIntegral
                    `cast`
                  (Trans
                       (<Data.Text.Internal.Text>_R
                        ->_R (GHC.Base.Maybe
                                (Trans
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))))_R)
                       (<Data.Text.Internal.Text>_R
                        ->_R (GHC.Base.Maybe
                                (Trans
                                     (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))))_R))
                  Web.PathPieces.$fPathPieceInt64_$ctoPathPiece
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <Data.Text.Internal.Text>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <Data.Text.Internal.Text>_R)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo ::
    Database.Persist.Class.PersistEntity.PersistEntity Main.ToDo
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ToDo
                  Main.$fPersistFieldKey
                  Main.$fToJSONKey
                  Main.$fFromJSONKey
                  Main.$fShowKey
                  Main.$fReadKey
                  Main.$fEqKey
                  Main.$fOrdKey
                  Main.$fPersistEntityToDo_$ckeyToValues
                  Main.$fPersistEntityToDo_$ckeyFromValues
                  Main.$fPersistEntityToDo33
                    `cast`
                  (Sym (Main.D:R:EntityFieldToDotyp0[0]) <Database.Persist.Class.PersistEntity.Key
                                                            Main.ToDo>_N)
                  Main.$fPersistEntityToDo_$centityDef
                  Main.$fPersistEntityToDo_$cpersistFieldDef
                  Main.$fPersistEntityToDo_$ctoPersistFields
                  Main.$fPersistEntityToDo_$cfromPersistValues
                  Main.$fPersistEntityToDo_$cpersistUniqueKeys
                  Main.$fPersistEntityToDo_$cpersistUniqueToFieldNames
                  Main.$fPersistEntityToDo_$cpersistUniqueToValues
                  Main.$fPersistEntityToDo_$cfieldLens -}
975ec13297fe3db6f8226dece4a307b2
  $fPersistEntityToDo1 :: [Database.Persist.Types.Base.PersistValue]
  {- Strictness: x -}
aca9d97fec5125ef8f586a68a1bf4497
  $fPersistEntityToDo10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.$fPersistEntityToDo11) -}
77b584eb9a68c417fa12fe60a678ff26
  $fPersistEntityToDo11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("title"#) -}
1c0ac61a11eddcd6ea679753e1b0004f
  $fPersistEntityToDo12 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Main.$fPersistEntityToDo24 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        Main.$fPersistEntityToDo23 of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        Main.$fPersistEntityToDo22 of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.N:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.N:DBName[0]))
                   Main.$fPersistEntityToDo19
                   Database.Persist.Types.Base.SqlInt64
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   (Database.Persist.Types.Base.ForeignRef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.N:HaskellName[0]))
                      Main.$fPersistEntityToDo13) } } }) -}
5a64007404f42d992b88ee83291e635a
  $fPersistEntityToDo13 :: Database.Persist.Types.Base.FieldType
  {- Strictness: m1,
     Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   Main.$fPersistEntityToDo16
                   Main.$fPersistEntityToDo14) -}
418b9dbb9d2405a10023917a42a3331c
  $fPersistEntityToDo14 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.$fPersistEntityToDo15) -}
71646cb9f998822d7068b11e08758998
  $fPersistEntityToDo15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Int64"#) -}
92ed7031bc5a127d9b5eceda2cfb06fb
  $fPersistEntityToDo16 :: GHC.Base.Maybe Data.Text.Internal.Text
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntityToDo17) -}
6c7c6aab5b6b8c75612fbaa2fc2b4a65
  $fPersistEntityToDo17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.$fPersistEntityToDo18) -}
08ac15c3adfec5e2cb7fbde27379603d
  $fPersistEntityToDo18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data.Int"#) -}
e058064221cf2edd766cd93086ee6125
  $fPersistEntityToDo19 :: Database.Persist.Types.Base.FieldType
  {- Strictness: m1,
     Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityToDo20) -}
800c839242810a550c88f30fb8101482
  $fPersistEntityToDo2 ::
    [(Database.Persist.Types.Base.HaskellName,
      Database.Persist.Types.Base.DBName)]
  {- Strictness: x -}
5848e8bb06164c86c9acdfeddb0f7031
  $fPersistEntityToDo20 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.$fPersistEntityToDo21) -}
58847abb42245e7dcc8935431f2c1a71
  $fPersistEntityToDo21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ToDoId"#) -}
606dce7ad6662a4ca27b263669986d08
  $fPersistEntityToDo22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ToDo"#) -}
97db9b1f656092b0e7f77064866fbdc0
  $fPersistEntityToDo23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("id"#) -}
cb67e4175808a8cdba2257d2cd27d957
  $fPersistEntityToDo24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Id"#) -}
79beb941950b27f4ff0c1836da32cba4
  $fPersistEntityToDo25 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Main.$fPersistEntityToDo22 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        Main.$fPersistEntityToDo32 of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        Main.$fPersistEntityToDo24 of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        Main.$fPersistEntityToDo23 of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Main.$fPersistEntityToDo_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.N:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.N:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.N:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.N:DBName[0]))
                      Main.$fPersistEntityToDo19
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.N:HaskellName[0]))
                         Main.$fPersistEntityToDo13))
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   Main.$fPersistEntityToDo29
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntityToDo26
                   dt
                   GHC.Types.False } } } } }) -}
316d07d66dd9f60dd0da98bc198b1a08
  $fPersistEntityToDo26 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntityToDo27
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
cde8376cbeb100d21546a775f74bb6e2
  $fPersistEntityToDo27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.$fPersistEntityToDo28) -}
4fe21898c9c54b32966593944c003570
  $fPersistEntityToDo28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Show"#) -}
13831c63bf3bc4a70888d82b010c5150
  $fPersistEntityToDo29 :: [Database.Persist.Types.Base.FieldDef]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityToDo9
                   Main.$fPersistEntityToDo30) -}
85f2f66f99e05c96302061e64de5ff17
  $fPersistEntityToDo3 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntityToDo7 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.N:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.N:DBName[0]))
                   Main.$fPersistEntityToDo4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
e5a5fcd5a50f8afb5c2dc9f24c680c0a
  $fPersistEntityToDo30 :: [Database.Persist.Types.Base.FieldDef]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityToDo3
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
81015b07145871ebedc840774f6a4071
  $fPersistEntityToDo31 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3db9db1bdfa757d9980e950742f00ef3
  $fPersistEntityToDo32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("to_do"#) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo33 ::
    Main.R:EntityFieldToDotyp
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Main.ToDoId
                   @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   Main.$fPersistEntityToDo_$d~~
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Database.Persist.Class.PersistEntity.Key
                                       Main.ToDo>_N <Database.Persist.Class.PersistEntity.Key
                                                       Main.ToDo>_N)) -}
ec9549c5fe7a5231bb949f1cd221ee84
  $fPersistEntityToDo4 :: Database.Persist.Types.Base.FieldType
  {- Strictness: m1,
     Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityToDo5) -}
11442dc6680d03d81b325cb322aaa22c
  $fPersistEntityToDo5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.$fPersistEntityToDo6) -}
d9c2383f8ede1f848c53937931e95b2d
  $fPersistEntityToDo6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("String"#) -}
0af4233bb8d1419d2d6502cc54f13b57
  $fPersistEntityToDo7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.$fPersistEntityToDo8) -}
5ea564d4ce6908caff545720f81a6f3e
  $fPersistEntityToDo8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("description"#) -}
ed34fd8d4bee10e1a439767155b98a4c
  $fPersistEntityToDo9 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntityToDo10 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.N:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.N:DBName[0]))
                   Main.$fPersistEntityToDo4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$centityDef ::
    GHC.Base.Monad m =>
    m Main.ToDo -> Database.Persist.Types.Base.EntityDef
  {- Arity: 2, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: m Main.ToDo) ->
                 Main.$fPersistEntityToDo25) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$cfieldLens ::
    Database.Persist.Class.PersistEntity.EntityField Main.ToDo field
    -> forall (f :: * -> *).
       GHC.Base.Functor f =>
       (field -> f field)
       -> Database.Persist.Class.PersistEntity.Entity Main.ToDo
       -> f (Database.Persist.Class.PersistEntity.Entity Main.ToDo)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U(U,U))>,
     Unfolding: (\ @ field
                   (dk :: Database.Persist.Class.PersistEntity.EntityField
                            Main.ToDo field)
                   @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (eta2 :: field -> f field)
                   (eta3 :: Database.Persist.Class.PersistEntity.Entity Main.ToDo) ->
                 case dk
                        `cast`
                      (Main.D:R:EntityFieldToDotyp0[0] <field>_N) of wild {
                   Main.ToDoId $d~
                   -> case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ field
                             @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                             $d~
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <*>_N <field>_N <Database.Persist.Class.PersistEntity.Key
                                                     Main.ToDo>_N) of cobox { DEFAULT ->
                      GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                        @ (Database.Persist.Class.PersistEntity.Entity Main.ToDo)
                        (\ (key :: Database.Persist.Class.PersistEntity.Key Main.ToDo) ->
                         case eta3 of wild1 { Database.Persist.Class.PersistEntity.Entity ds value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.ToDo
                           key
                           value })
                        (eta2
                           (case eta3 of wild1 { Database.Persist.Class.PersistEntity.Entity ds1 ds2 ->
                            ds1 `cast` (Sub (Sym cobox)) }))
                          `cast`
                        (<f>_R cobox) }
                   Main.ToDoTitle $d~
                   -> case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ field
                             @ GHC.Base.String
                             $d~
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <*>_N <field>_N <GHC.Base.String>_N) of cobox { DEFAULT ->
                      GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ GHC.Base.String
                        @ (Database.Persist.Class.PersistEntity.Entity Main.ToDo)
                        (\ (x :: GHC.Base.String) ->
                         case eta3 of wild1 { Database.Persist.Class.PersistEntity.Entity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.ToDo
                           key
                           (case value of wild2 { Main.ToDo ds ds1 ->
                            case x of dt { DEFAULT -> Main.ToDo dt ds1 } }) })
                        (eta2
                           (case eta3 of wild1 { Database.Persist.Class.PersistEntity.Entity ds1 ds2 ->
                            case ds2 of wild2 { Main.ToDo ds ds4 ->
                            ds `cast` (Sub (Sym cobox)) } }))
                          `cast`
                        (<f>_R cobox) }
                   Main.ToDoDescription $d~
                   -> case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ field
                             @ GHC.Base.String
                             $d~
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <*>_N <field>_N <GHC.Base.String>_N) of cobox { DEFAULT ->
                      GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ GHC.Base.String
                        @ (Database.Persist.Class.PersistEntity.Entity Main.ToDo)
                        (\ (x :: GHC.Base.String) ->
                         case eta3 of wild1 { Database.Persist.Class.PersistEntity.Entity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.ToDo
                           key
                           (case value of wild2 { Main.ToDo ds ds1 ->
                            case x of dt { DEFAULT -> Main.ToDo ds dt } }) })
                        (eta2
                           (case eta3 of wild1 { Database.Persist.Class.PersistEntity.Entity ds1 ds2 ->
                            case ds2 of wild2 { Main.ToDo ds ds4 ->
                            ds4 `cast` (Sub (Sym cobox)) } }))
                          `cast`
                        (<f>_R cobox) } }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$cfromPersistValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either Data.Text.Internal.Text Main.ToDo
  {- Arity: 1, Strictness: <S,U> -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$ckeyFromValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Database.Persist.Types.Base.PersistValue]) ->
                 case (Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                         (Database.Persist.TH.headNote x))
                        `cast`
                      (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))))_R of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                        y `cast`
                        (Trans
                             (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))) }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$ckeyToValues ::
    Database.Persist.Class.PersistEntity.Key Main.ToDo
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Database.Persist.Class.PersistEntity.Key Main.ToDo) ->
                 GHC.Types.:
                   @ Database.Persist.Types.Base.PersistValue
                   (Database.Persist.Types.Base.PersistInt64
                      x `cast`
                      (Trans
                           (Main.D:R:KeyToDo0[0])
                           (Trans
                                (Main.N:R:KeyToDo[0])
                                (Trans
                                     (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0])
                                     (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0])))))
                   (GHC.Types.[] @ Database.Persist.Types.Base.PersistValue)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$cpersistFieldDef ::
    Database.Persist.Class.PersistEntity.EntityField Main.ToDo typ
    -> Database.Persist.Types.Base.FieldDef
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ typ
                   (ds :: Database.Persist.Class.PersistEntity.EntityField
                            Main.ToDo typ) ->
                 case ds `cast` (Main.D:R:EntityFieldToDotyp0[0] <typ>_N) of wild {
                   Main.ToDoId $d~
                   -> case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ typ
                             @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                             $d~
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <*>_N <typ>_N <Database.Persist.Class.PersistEntity.Key
                                                   Main.ToDo>_N) of cobox { DEFAULT ->
                      Main.$fPersistEntityToDo12 }
                   Main.ToDoTitle $d~
                   -> case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ typ
                             @ GHC.Base.String
                             $d~
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <*>_N <typ>_N <GHC.Base.String>_N) of cobox { DEFAULT ->
                      Main.$fPersistEntityToDo9 }
                   Main.ToDoDescription $d~
                   -> case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ typ
                             @ GHC.Base.String
                             $d~
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <*>_N <typ>_N <GHC.Base.String>_N) of cobox { DEFAULT ->
                      Main.$fPersistEntityToDo3 } }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$cpersistUniqueKeys ::
    Main.ToDo
    -> [Database.Persist.Class.PersistEntity.Unique Main.ToDo]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ToDo) ->
                 case ds of wild { Main.ToDo _title _description ->
                 GHC.Types.[]
                   @ (Database.Persist.Class.PersistEntity.Unique Main.ToDo) }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$cpersistUniqueToFieldNames ::
    Database.Persist.Class.PersistEntity.Unique Main.ToDo
    -> [(Database.Persist.Types.Base.HaskellName,
         Database.Persist.Types.Base.DBName)]
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Database.Persist.Class.PersistEntity.Unique Main.ToDo) ->
                 Main.$fPersistEntityToDo2) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$cpersistUniqueToValues ::
    Database.Persist.Class.PersistEntity.Unique Main.ToDo
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Database.Persist.Class.PersistEntity.Unique Main.ToDo) ->
                 Main.$fPersistEntityToDo1) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$ctoPersistFields ::
    Main.ToDo -> [Database.Persist.Class.PersistField.SomePersistField]
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ToDo) ->
                 case ds of wild { Main.ToDo x x1 ->
                 GHC.Types.:
                   @ Database.Persist.Class.PersistField.SomePersistField
                   (Database.Persist.Class.PersistField.SomePersistField
                      @ GHC.Base.String
                      Database.Persist.Class.PersistField.$fPersistField[]0
                      x)
                   (GHC.Types.:
                      @ Database.Persist.Class.PersistField.SomePersistField
                      (Database.Persist.Class.PersistField.SomePersistField
                         @ GHC.Base.String
                         Database.Persist.Class.PersistField.$fPersistField[]0
                         x1)
                      (GHC.Types.[]
                         @ Database.Persist.Class.PersistField.SomePersistField)) }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistEntityToDo_$d~~ ::
    (Database.Persist.Class.PersistEntity.Key Main.ToDo :: *)
    GHC.Types.~~
    (Database.Persist.Class.PersistEntity.Key Main.ToDo :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   @~ <Database.Persist.Class.PersistEntity.Key Main.ToDo>_N) -}
7c675a902dc7ea5637e20907965be4f5
  $fPersistEntityToDo_$sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Main.$fPersistEntityToDo31
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2
                             GHC.Types.LT
                             -> Main.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 } } } } } } }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistFieldKey ::
    Database.Persist.Class.PersistField.PersistField
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Database.Persist.Types.Base.PersistInt64
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <Database.Persist.Types.Base.PersistValue>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <Database.Persist.Types.Base.PersistValue>_R))
                  Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                    `cast`
                  (Trans
                       (<Database.Persist.Types.Base.PersistValue>_R
                        ->_R (Data.Either.Either
                                <Data.Text.Internal.Text>_R
                                (Trans
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                     (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))))_R)
                       (<Database.Persist.Types.Base.PersistValue>_R
                        ->_R (Data.Either.Either
                                <Data.Text.Internal.Text>_R
                                (Trans
                                     (Sym (Main.N:R:KeyToDo[0]))
                                     (Sym (Main.D:R:KeyToDo0[0]))))_R)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistFieldSqlKey ::
    Database.Persist.Sql.Class.PersistFieldSql
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Main.$fPersistFieldKey
                  Database.Persist.Sql.Class.$fPersistFieldSqlInt64_$csqlType
                    `cast`
                  (Trans
                       ((Data.Proxy.Proxy
                           <*>_N
                           <GHC.Int.Int64, Database.Persist.Class.PersistStore.BackendKey
                                             Database.Persist.Sql.Types.Internal.SqlBackend>)_R
                        ->_R <Database.Persist.Types.Base.SqlType>_R)
                       ((Data.Proxy.Proxy
                           <*>_N
                           <Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.Internal.SqlBackend, Database.Persist.Class.PersistEntity.Key
                                                                                Main.ToDo>)_R
                        ->_R <Database.Persist.Types.Base.SqlType>_R)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistFieldSqlToDo ::
    Database.Persist.Sql.Class.PersistFieldSql Main.ToDo
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ToDo
                  Main.$fPersistFieldToDo
                  Main.$fPersistFieldSqlToDo_$csqlType -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistFieldSqlToDo_$csqlType ::
    Data.Proxy.Proxy Main.ToDo -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Main.ToDo) ->
                 Database.Persist.Types.Base.SqlString) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistFieldToDo ::
    Database.Persist.Class.PersistField.PersistField Main.ToDo
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ToDo
                  Main.$fPersistFieldToDo_$ctoPersistValue
                  Main.$fPersistFieldToDo_$cfromPersistValue -}
5143452560699bd73ad22874c0618720
  $fPersistFieldToDo1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fPersistEntityToDo8) -}
aa27733f39ca60ee1964c4c0353c446b
  $fPersistFieldToDo2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fPersistEntityToDo11) -}
d518c842515d464871ea14e3685c5aed
  $fPersistFieldToDo3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Main.$fPersistFieldToDo4 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
764328622f8b8b2a22a718d021e58581
  $fPersistFieldToDo4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Main.$wouter1 ipv1 4# Main.$fPersistFieldToDo1 0# ipv }) -}
7cfa77cdba04901b052cae5d6edae2eb
  $fPersistFieldToDo5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Main.$fPersistFieldToDo6 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
80db69794014fa080baf32936382a797
  $fPersistFieldToDo6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Main.$wouter2 ipv1 4# Main.$fPersistFieldToDo2 0# ipv }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistFieldToDo_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either Data.Text.Internal.Text Main.ToDo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta2 :: Database.Persist.Types.Base.PersistValue) ->
                 case Database.Persist.Class.PersistField.getPersistMap
                        eta2 of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ Data.Text.Internal.Text @ Main.ToDo l
                   Data.Either.Right r
                   -> let {
                        columns :: Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text
                                     Database.Persist.Types.Base.PersistValue
                        = Main.$fPersistFieldToDo_go
                            r
                            (Data.HashMap.Base.Empty
                               @ Data.Text.Internal.Text
                               @ Database.Persist.Types.Base.PersistValue)
                      } in
                      let {
                        c :: GHC.Base.String -> Database.Persist.Types.Base.PersistValue
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (name :: GHC.Base.String) ->
                          case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s1 of ds1 { (#,#) ipv ipv1 ->
                                  Main.$wouter ipv1 4# name 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                          case ipv1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Main.$w$slookup
                                 @ Database.Persist.Types.Base.PersistValue
                                 ww1
                                 ww2
                                 ww3
                                 columns of wild1 {
                            GHC.Base.Nothing -> Database.Persist.Types.Base.PersistNull
                            GHC.Base.Just v -> v } } }
                      } in
                      Main.$fPersistEntityToDo_$cfromPersistValues
                        (GHC.Types.:
                           @ Database.Persist.Types.Base.PersistValue
                           (c Main.$fPersistFieldToDo2)
                           (GHC.Types.:
                              @ Database.Persist.Types.Base.PersistValue
                              (c Main.$fPersistFieldToDo1)
                              (GHC.Types.[] @ Database.Persist.Types.Base.PersistValue))) }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fPersistFieldToDo_$ctoPersistValue ::
    Main.ToDo -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, Strictness: <L,1*U(U,U)>m12, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.ToDo) ->
                 case Main.$w$ctoPersistValue w of ww { Unit# ww1 ->
                 Database.Persist.Types.Base.PersistMap ww1 }) -}
f2a4e655f58927a5755039049488c3af
  $fPersistFieldToDo_go ::
    [(Data.Text.Internal.Text,
      Database.Persist.Types.Base.PersistValue)]
    -> Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Database.Persist.Types.Base.PersistValue
    -> Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Database.Persist.Types.Base.PersistValue
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fReadKey ::
    GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Main.$fReadKey_$creadsPrec
                  Main.$fReadKey_$creadList
                  Main.$fReadKey1
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Database.Persist.Class.PersistEntity.Key Main.ToDo>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Database.Persist.Class.PersistEntity.Key Main.ToDo>_R)))
                  Main.$fReadKey_$creadListPrec -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fReadKey1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.ToDo
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   Main.$fReadKey2
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Database.Persist.Class.PersistEntity.Key Main.ToDo>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.ToDo>_R)))) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fReadKey2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.ToDo
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Database.Persist.Class.PersistEntity.Key Main.ToDo
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$creadPrec ww1 @ b w1 }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fReadKey3 ::
    Text.ParserCombinators.ReadP.P
      [Database.Persist.Class.PersistEntity.Key Main.ToDo]
  {- Unfolding: ((Main.$fReadKey_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[Database.Persist.Class.PersistEntity.Key Main.ToDo]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[Database.Persist.Class.PersistEntity.Key Main.ToDo]>_R)
                   @ [Database.Persist.Class.PersistEntity.Key Main.ToDo]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Database.Persist.Class.PersistEntity.Key Main.ToDo])) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fReadKey_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [Database.Persist.Class.PersistEntity.Key Main.ToDo]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Database.Persist.Class.PersistEntity.Key Main.ToDo]
                   Main.$fReadKey3) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fReadKey_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Database.Persist.Class.PersistEntity.Key Main.ToDo]
  {- Unfolding: (GHC.Read.list
                   @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   Main.$fReadKey1
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Database.Persist.Class.PersistEntity.Key Main.ToDo>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.ToDo>_R)))) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fReadKey_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   (GHC.Read.$fRead()6
                      @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                      Main.$fReadKey2
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                          <Database.Persist.Class.PersistEntity.Key Main.ToDo>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                     <Database.Persist.Class.PersistEntity.Key Main.ToDo>_R)))
                      n
                      @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)))) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowKey ::
    GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Main.$fShowKey_$cshowsPrec
                  Main.$fShowKey_$cshow
                  Main.$fShowKey_$cshowList -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowKey1 ::
    Database.Persist.Class.PersistEntity.Key Main.ToDo
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: (\ (w :: Database.Persist.Class.PersistEntity.Key
                           Main.ToDo)
                   (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec 0# w w1) -}
f9af9ac778c7d32e2cb006e1d54c1144
  $fShowKey2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
f7a9c45332a26e2b9a24b25d0a8acc0e
  $fShowKey3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unToDoKey = "#) -}
fafd7b2a73ee571858e69a41d6d4e40d
  $fShowKey4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ToDoKey {"#) -}
ce2ef56882749ea10705e38e9fe44147
  $fShowKey5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowKey2) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowKey_$cshow ::
    Database.Persist.Class.PersistEntity.Key Main.ToDo
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Database.Persist.Class.PersistEntity.Key
                           Main.ToDo) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowKey4
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowKey3
                      (Database.Persist.Sql.Orphan.PersistStore.$w$cshowsPrec
                         0#
                         x `cast` (Trans (Main.D:R:KeyToDo0[0]) (Main.N:R:KeyToDo[0]))
                         Main.$fShowKey5))) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowKey_$cshowList ::
    [Database.Persist.Class.PersistEntity.Key Main.ToDo]
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Show.showList__
                   @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   Main.$fShowKey1) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowKey_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Persist.Class.PersistEntity.Key Main.ToDo
    -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowToDo :: GHC.Show.Show Main.ToDo
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ToDo
                  Main.$fShowToDo_$cshowsPrec
                  Main.$fShowToDo_$cshow
                  Main.$fShowToDo_$cshowList -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowToDo1 :: Main.ToDo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,U>,
     Unfolding: (\ (w :: Main.ToDo) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.ToDo ww1 ww2 ->
                 Main.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
fd5837cf233a070edc5e5695faab27f8
  $fShowToDo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("toDoDescription = "#) -}
81cab3b864fa5487f349a82595663d18
  $fShowToDo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("toDoTitle = "#) -}
e4b0a2f4dd48d8b073e18452b2cf64a7
  $fShowToDo4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ToDo {"#) -}
759ed5b89f2528a050a42f2f86d1323a
  $fShowToDo5 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.$fShowToDo6) -}
fb46d777ac7192d14e06de5be91dd717
  $fShowToDo6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.$fShowKey2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowToDo_$cshow :: Main.ToDo -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.ToDo) ->
                 case w of ww { Main.ToDo ww1 ww2 -> Main.$w$cshow ww1 ww2 }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowToDo_$cshowList :: [Main.ToDo] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.ToDo Main.$fShowToDo1) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fShowToDo_$cshowsPrec ::
    GHC.Types.Int -> Main.ToDo -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(SS),1*U(U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.ToDo)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.ToDo ww3 ww4 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToBackendKeySqlBackendToDo ::
    Database.Persist.Class.PersistStore.ToBackendKey
      Database.Persist.Sql.Types.Internal.SqlBackend Main.ToDo
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Database.Persist.Sql.Types.Internal.SqlBackend
                  @ Main.ToDo
                  Main.$fPersistEntityToDo
                  Main.$fToBackendKeySqlBackendToDo_$d~~
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) (Sym (Main.D:R:PersistEntityBackendToDo[0])) <Database.Persist.Sql.Types.Internal.SqlBackend>_N)
                  Database.Persist.Sql.Orphan.PersistStore.$fPersistCoreSqlBackend
                  Main.$fToBackendKeySqlBackendToDo1
                    `cast`
                  (<Database.Persist.Class.PersistEntity.Key Main.ToDo>_R
                   ->_R Trans (Main.D:R:KeyToDo0[0]) (Main.N:R:KeyToDo[0]))
                  (\ (v :: Database.Persist.Class.PersistStore.BackendKey
                             Database.Persist.Sql.Types.Internal.SqlBackend) ->
                   v)
                    `cast`
                  (<Database.Persist.Class.PersistStore.BackendKey
                      Database.Persist.Sql.Types.Internal.SqlBackend>_R
                   ->_R Trans
                            (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToBackendKeySqlBackendToDo1 ::
    Database.Persist.Class.PersistEntity.Key Main.ToDo
    -> Database.Persist.Class.PersistEntity.Key Main.ToDo
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Database.Persist.Class.PersistEntity.Key Main.ToDo) ->
                 ds) -}
ab3ca90fca866f32416410fc71046bf1
  $fToBackendKeySqlBackendToDo_$d~~ ::
    (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
    GHC.Types.~~
    (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @~ <Database.Persist.Sql.Types.Internal.SqlBackend>_N) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToHttpApiDataKey ::
    Web.Internal.HttpApiData.ToHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Web.Internal.HttpApiData.$fToHttpApiDataInt64_$ctoUrlPiece
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <Data.Text.Internal.Text>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <Data.Text.Internal.Text>_R))
                  Web.Internal.HttpApiData.$fToHttpApiDataInt64_$ctoEncodedUrlPiece
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <Data.ByteString.Builder.Internal.Builder>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <Data.ByteString.Builder.Internal.Builder>_R))
                  Web.Internal.HttpApiData.$fToHttpApiDataInt64_$ctoHeader
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <Data.ByteString.Internal.ByteString>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <Data.ByteString.Internal.ByteString>_R))
                  Web.Internal.HttpApiData.$fToHttpApiDataInt64_$ctoUrlPiece
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <Data.Text.Internal.Text>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <Data.Text.Internal.Text>_R)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToJSONKey ::
    Data.Aeson.Types.ToJSON.ToJSON
      (Database.Persist.Class.PersistEntity.Key Main.ToDo)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.ToDo)
                  Data.Aeson.Types.ToJSON.$fToJSONInt64_$ctoJSON
                    `cast`
                  (Trans
                       (Trans
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                            (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                        ->_R <Data.Aeson.Types.Internal.Value>_R)
                       (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                        ->_R <Data.Aeson.Types.Internal.Value>_R))
                  Data.Aeson.Encoding.Internal.int4
                    `cast`
                  (Trans
                       (<GHC.Int.Int64>_R
                        ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Types.Internal.Value>_P))
                       (Trans
                            (Trans
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                                 (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))
                             ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                     Data.Aeson.Types.Internal.Value>_R)
                            (Trans (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))
                             ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                     Data.Aeson.Types.Internal.Value>_R)))
                  Data.Aeson.Types.ToJSON.$fToJSONInt64_$ctoJSONList
                    `cast`
                  (Trans
                       (([Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))])_R
                        ->_R <Data.Aeson.Types.Internal.Value>_R)
                       (([Trans
                              (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))])_R
                        ->_R <Data.Aeson.Types.Internal.Value>_R))
                  Data.Aeson.Types.ToJSON.$fToJSONInt64_$ctoEncodingList
                    `cast`
                  (Trans
                       (([Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0]))])_R
                        ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                Data.Aeson.Types.Internal.Value>_R)
                       (([Trans
                              (Sym (Main.N:R:KeyToDo[0])) (Sym (Main.D:R:KeyToDo0[0]))])_R
                        ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                Data.Aeson.Types.Internal.Value>_R)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToJSONToDo :: Data.Aeson.Types.ToJSON.ToJSON Main.ToDo
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ToDo
                  Main.$fToJSONToDo_$ctoJSON
                  Main.$fToJSONToDo_$ctoEncoding
                  Main.$fToJSONToDo_$ctoJSONList
                  Main.$fToJSONToDo_$ctoEncodingList -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToJSONToDo_$ctoEncoding ::
    Main.ToDo -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Main.ToDo) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Main.$fToJSONToDo_$ctoJSON x))
                  `cast`
                (<Main.ToDo>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToJSONToDo_$ctoEncodingList ::
    [Main.ToDo] -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Main.ToDo
                   Main.$fToJSONToDo_$ctoEncoding) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToJSONToDo_$ctoJSON ::
    Main.ToDo -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.ToDo) ->
                 case w of ww { Main.ToDo ww1 ww2 ->
                 case Main.$w$ctoJSON ww1 ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $fToJSONToDo_$ctoJSONList ::
    [Main.ToDo] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Main.ToDo]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Main.ToDo
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Main.ToDo
                                     c
                                     Main.$fToJSONToDo_$ctoJSON)
                                  n1
                                  x)))))) -}
ce98a32a9eb76c666c4299951819bc4b
  $s$fApplicativeNoLoggingT ::
    GHC.Base.Applicative (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT
                  GHC.Base.$fApplicativeIO4
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                       (<a>_R
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <a>_N))
                  (\ @ a @ b -> GHC.Base.$fApplicativeIO3 @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<GHC.Types.IO (a -> b)>_R
                        ->_R <GHC.Types.IO a>_R
                        ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                       (Sym (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R) <a
                                                                                     -> b>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <a>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N))
                  GHC.Base.$fApplicativeIO_$cliftA2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                 <GHC.Types.IO>_R) <a>_N
                   ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                 <GHC.Types.IO>_R) <b>_N
                   ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                 <GHC.Types.IO>_R) <c>_N)
                  GHC.Base.$fApplicativeIO2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<GHC.Types.IO a>_R
                        ->_R <GHC.Types.IO b>_R
                        ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                       (Sym (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R) <a>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N))
                  GHC.Base.$fApplicativeIO1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<GHC.Types.IO a>_R
                        ->_R <GHC.Types.IO b>_R
                        ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                       (Sym (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R) <a>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <a>_N)) -}
ec9b2544621a3f01fe46a9a48906aa2e
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT ::
    GHC.Base.Functor (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  GHC.Base.$fFunctorIO2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<a -> b>_R
                        ->_R <GHC.Types.IO a>_R
                        ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                       (<a -> b>_R
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <a>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N))
                  GHC.Base.$fFunctorIO1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<a>_R ->_R <GHC.Types.IO b>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                       (<a>_R
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <a>_N)) -}
e7bc306e0fbc20888303a7b9e049b317
  $s$fApplicativeResourceT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
                  Main.$s$fApplicativeResourceT_$s$fFunctorResourceT
                  (\ @ a (eta2 :: a) ->
                   let {
                     x :: GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, eta2 #)
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   (Trans
                        (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Nth:3
                                  (Trans
                                       (<a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                       (<a>_R
                                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R) <a>_N)))
                        (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                  <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N))))
                  (\ @ a
                     @ b
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              (Control.Monad.Logger.NoLoggingT GHC.Types.IO) (a -> b))
                     (ds1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                               (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (ds
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a -> b>_N)
                           r)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Trans
                                       (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R <a
                                                                                               -> b>_N
                                        ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <a>_N
                                        ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <b>_N)
                                       (<GHC.Types.IO (a -> b)>_R
                                        ->_R <GHC.Types.IO a>_R
                                        ->_R GHC.Types.N:IO[0] <b>_R)))
                             (GHC.Types.N:IO[0] <a -> b>_R))
                          s of ds2 { (#,#) ipv ipv1 ->
                   case (ds1
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N)
                           r)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <a -> b>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <a>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b>_N)
                                            (<GHC.Types.IO (a -> b)>_R
                                             ->_R <GHC.Types.IO a>_R
                                             ->_R GHC.Types.N:IO[0] <b>_R))))
                             (GHC.Types.N:IO[0] <a>_R))
                          ipv of ds3 { (#,#) ipv2 ipv3 ->
                   (# ipv2, ipv1 ipv3 #) } })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) (a -> b)>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                        ->_R Nth:3
                                 (Nth:3
                                      (Trans
                                           (<GHC.Types.IO (a -> b)>_R
                                            ->_R <GHC.Types.IO a>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                                           (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                     <GHC.Types.IO>_R) <a -> b>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <a>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <b>_N))))
                       (<Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) (a -> b)>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                      <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)))
                  (\ @ a
                     @ b
                     @ c
                     (eta2 :: a -> b -> c)
                     (eta3 :: Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a)
                     (eta4 :: Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b)
                     (eta5 :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (eta3
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N)
                           eta5)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (<a -> b -> c>_R
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <a>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b -> c>_N)
                                            (<a -> b -> c>_R
                                             ->_R <GHC.Types.IO a>_R
                                             ->_R GHC.Types.N:IO[0] <b -> c>_R))))
                             (GHC.Types.N:IO[0] <a>_R))
                          s of ds { (#,#) ipv ipv1 ->
                   case (eta4
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)
                           eta5)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <b -> c>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <c>_N)
                                            (<GHC.Types.IO (b -> c)>_R
                                             ->_R <GHC.Types.IO b>_R
                                             ->_R GHC.Types.N:IO[0] <c>_R))))
                             (GHC.Types.N:IO[0] <b>_R))
                          ipv of ds1 { (#,#) ipv2 ipv3 ->
                   (# ipv2, eta2 ipv1 ipv3 #) } })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   Trans
                       (<a -> b -> c>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R <GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                        ->_R Nth:3
                                 (Nth:3
                                      (Trans
                                           (<GHC.Types.IO (b -> c)>_R
                                            ->_R <GHC.Types.IO b>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <c>_R))
                                           (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                     <GHC.Types.IO>_R) <b -> c>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <b>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <c>_N))))
                       (<a -> b -> c>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                      <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <c>_N)))
                  (\ @ a
                     @ b
                     (eta2 :: Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a)
                     (eta3 :: Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b)
                     (eta4 :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (eta2
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N)
                           eta4)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (<a -> b -> b>_R
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <a>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b -> b>_N)
                                            (<a -> b -> b>_R
                                             ->_R <GHC.Types.IO a>_R
                                             ->_R GHC.Types.N:IO[0] <b -> b>_R))))
                             (GHC.Types.N:IO[0] <a>_R))
                          s of ds { (#,#) ipv ipv1 ->
                   (eta3
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                         <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)
                      eta4)
                     `cast`
                   (Trans
                        (Nth:2
                             (Nth:3
                                  (Trans
                                       (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R <b
                                                                                               -> b>_N
                                        ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <b>_N
                                        ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <b>_N)
                                       (<GHC.Types.IO (b -> b)>_R
                                        ->_R <GHC.Types.IO b>_R
                                        ->_R GHC.Types.N:IO[0] <b>_R))))
                        (GHC.Types.N:IO[0] <b>_R))
                     ipv })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R <GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                        ->_R Nth:3
                                 (Nth:3
                                      (Trans
                                           (<GHC.Types.IO (b -> b)>_R
                                            ->_R <GHC.Types.IO b>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                                           (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                     <GHC.Types.IO>_R) <b -> b>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <b>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <b>_N))))
                       (<Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                      <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)))
                  (\ @ a
                     @ b
                     (eta2 :: Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a)
                     (eta3 :: Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b)
                     (eta4 :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (eta2
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N)
                           eta4)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (<a -> b -> a>_R
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <a>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b -> a>_N)
                                            (<a -> b -> a>_R
                                             ->_R <GHC.Types.IO a>_R
                                             ->_R GHC.Types.N:IO[0] <b -> a>_R))))
                             (GHC.Types.N:IO[0] <a>_R))
                          s of ds { (#,#) ipv ipv1 ->
                   case (eta3
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)
                           eta4)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <b -> a>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <a>_N)
                                            (<GHC.Types.IO (b -> a)>_R
                                             ->_R <GHC.Types.IO b>_R
                                             ->_R GHC.Types.N:IO[0] <a>_R))))
                             (GHC.Types.N:IO[0] <b>_R))
                          ipv of ds1 { (#,#) ipv2 ipv3 ->
                   (# ipv2, ipv1 #) } })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R <GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                        ->_R Nth:3
                                 (Nth:3
                                      (Trans
                                           (<GHC.Types.IO (b -> a)>_R
                                            ->_R <GHC.Types.IO b>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                           (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                     <GHC.Types.IO>_R) <b -> a>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <b>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <a>_N))))
                       (<Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                      <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N))) -}
f483ea10f31c9abc36e1ab70f0c53f79
  $s$fApplicativeResourceT_$s$fFunctorResourceT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
                  (\ @ a
                     @ b
                     (f :: a -> b)
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (ds
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N)
                           r)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (<a -> b>_R
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <a>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b>_N)
                                            (<a -> b>_R
                                             ->_R <GHC.Types.IO a>_R
                                             ->_R GHC.Types.N:IO[0] <b>_R))))
                             (GHC.Types.N:IO[0] <a>_R))
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv, f ipv1 #) })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<a -> b>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                        ->_R Nth:3
                                 (Nth:3
                                      (Trans
                                           (<a -> b>_R
                                            ->_R <GHC.Types.IO a>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                                           (<a -> b>_R
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <a>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <b>_N))))
                       (<a -> b>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                      <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)))
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta2 :: Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b)
                     (eta3 :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (eta2
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)
                           eta3)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (<b -> a>_R
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b>_N
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <a>_N)
                                            (<b -> a>_R
                                             ->_R <GHC.Types.IO b>_R
                                             ->_R GHC.Types.N:IO[0] <a>_R))))
                             (GHC.Types.N:IO[0] <b>_R))
                          s of ds { (#,#) ipv ipv1 ->
                   (# ipv, x #) })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<a>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R <GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                        ->_R Nth:3
                                 (Nth:3
                                      (Trans
                                           (<b -> a>_R
                                            ->_R <GHC.Types.IO b>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                           (<b -> a>_R
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <b>_N
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <a>_N))))
                       (<a>_R
                        ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                      <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N))) -}
a35aa89f9dfda2ffd8f3017e78922b9d
  $s$fMonadIONoLoggingT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT
                  (\ @ a -> GHC.Base.id @ (GHC.Types.IO a))
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                 <GHC.Types.IO>_R) <a>_N) -}
9a17314011bb8448270ed361415cea45
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT ::
    GHC.Base.Monad (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Main.$s$fApplicativeNoLoggingT
                  GHC.Base.$fMonadIO1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<GHC.Types.IO a>_R
                        ->_R <a -> GHC.Types.IO b>_R
                        ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                       (Sym (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R) <a>_N
                        ->_R (<a>_R
                              ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                            <GHC.Types.IO>_R) <b>_N)
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N))
                  GHC.Base.$fApplicativeIO2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<GHC.Types.IO a>_R
                        ->_R <GHC.Types.IO b>_R
                        ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                       (Sym (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R) <a>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <b>_N))
                  GHC.Base.$fApplicativeIO4
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                       (<a>_R
                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                      <GHC.Types.IO>_R) <a>_N))
                  GHC.Base.$fMonadIO_$cfail
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R
                   ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                 <GHC.Types.IO>_R) <a>_N) -}
259369ad9f59f03fb35e507a580dc47b
  $s$fMonadIOResourceT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
                  Main.$s$fMonadIOResourceT_$s$fMonadResourceT
                  (\ @ a
                     (eta2 :: GHC.Types.IO a)
                     (ds :: GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   eta2)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R) <a>_N)) -}
fcaf040d84ab28886dea49f9cb581361
  $s$fMonadIOResourceT_$cliftIO ::
    GHC.Types.IO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   (eta2 :: GHC.Types.IO a)
                   (ds :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                 eta2)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.IO a>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                               (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R) <a>_N)) -}
c752c3b7c6fe67cc0dd9daa5d51f7e60
  $s$fMonadIOResourceT_$s$fMonadResourceT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
                  Main.$s$fApplicativeResourceT
                  (\ @ a
                     @ b
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a)
                     (f :: a
                           -> Control.Monad.Trans.Resource.Internal.ResourceT
                                (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (ds
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N)
                           r)
                          `cast`
                        (Trans
                             (Nth:2
                                  (Trans
                                       (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R <a>_N
                                        ->_R (<a>_R
                                              ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                       <GHC.Types.IO>_R <b>_N)
                                        ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <b>_N)
                                       (<GHC.Types.IO a>_R
                                        ->_R <a -> GHC.Types.IO b>_R
                                        ->_R GHC.Types.N:IO[0] <b>_R)))
                             (GHC.Types.N:IO[0] <a>_R))
                          s of ds1 { (#,#) ipv ipv1 ->
                   ((f ipv1)
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                         <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)
                      r)
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (Control.Monad.Logger.N:NoLoggingT[0]
                                                 <GHC.Types.IO>_R <a>_N
                                             ->_R (<a>_R
                                                   ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                            <GHC.Types.IO>_R <b>_N)
                                             ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R <b>_N)
                                            (<GHC.Types.IO a>_R
                                             ->_R <a -> GHC.Types.IO b>_R
                                             ->_R GHC.Types.N:IO[0] <b>_R)))))
                        (GHC.Types.N:IO[0] <b>_R))
                     ipv })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <a
                              -> Control.Monad.Trans.Resource.Internal.ResourceT
                                   (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R <GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                        ->_R Nth:3
                                 (Nth:3
                                      (Trans
                                           (<GHC.Types.IO a>_R
                                            ->_R <a -> GHC.Types.IO b>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                                           (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                     <GHC.Types.IO>_R) <a>_N
                                            ->_R (<a>_R
                                                  ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                                <GHC.Types.IO>_R) <b>_N)
                                            ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R) <b>_N))))
                       (<Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                        ->_R <a
                              -> Control.Monad.Trans.Resource.Internal.ResourceT
                                   (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                        ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                      <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)))
                  Main.$s$fMonadIOResourceT_$s$fMonadResourceT_$c>>
                  (\ @ a (eta2 :: a) ->
                   let {
                     x :: GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, eta2 #)
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   (Trans
                        (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Nth:3
                                  (Trans
                                       (<a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                       (<a>_R
                                        ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R) <a>_N)))
                        (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                  <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N))))
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a)) -}
b89e230f0ee03a29938aada8541d805d
  $s$fMonadIOResourceT_$s$fMonadResourceT_$c>> ::
    Control.Monad.Trans.Resource.Internal.ResourceT
      (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m3 :: Control.Monad.Trans.Resource.Internal.ResourceT
                            (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a)
                   (k :: Control.Monad.Trans.Resource.Internal.ResourceT
                           (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b)
                   (r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m3
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N)
                         r)
                        `cast`
                      (Trans
                           (Nth:2
                                (Trans
                                     (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R <a>_N
                                      ->_R (<a>_R
                                            ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                     <GHC.Types.IO>_R <b>_N)
                                      ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                               <GHC.Types.IO>_R <b>_N)
                                     (<GHC.Types.IO a>_R
                                      ->_R <a -> GHC.Types.IO b>_R
                                      ->_R GHC.Types.N:IO[0] <b>_R)))
                           (GHC.Types.N:IO[0] <a>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (k `cast`
                  (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                       <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N)
                    r)
                   `cast`
                 (Trans
                      (Nth:3
                           (Nth:2
                                (Nth:3
                                     (Trans
                                          (Control.Monad.Logger.N:NoLoggingT[0]
                                               <GHC.Types.IO>_R <a>_N
                                           ->_R (<a>_R
                                                 ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                          <GHC.Types.IO>_R <b>_N)
                                           ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                    <GHC.Types.IO>_R <b>_N)
                                          (<GHC.Types.IO a>_R
                                           ->_R <a -> GHC.Types.IO b>_R
                                           ->_R GHC.Types.N:IO[0] <b>_R)))))
                      (GHC.Types.N:IO[0] <b>_R))
                   ipv })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Trans
                     (<Control.Monad.Trans.Resource.Internal.ResourceT
                         (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                      ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                              (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                      ->_R <GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                      ->_R Nth:3
                               (Nth:3
                                    (Trans
                                         (<GHC.Types.IO a>_R
                                          ->_R <a -> GHC.Types.IO b>_R
                                          ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                                         (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                   <GHC.Types.IO>_R) <a>_N
                                          ->_R (<a>_R
                                                ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                              <GHC.Types.IO>_R) <b>_N)
                                          ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                        <GHC.Types.IO>_R) <b>_N))))
                     (<Control.Monad.Trans.Resource.Internal.ResourceT
                         (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a>_R
                      ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                              (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b>_R
                      ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                    <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N))) -}
3f852c61da056d9685a700689967db09
  $s$fMonadResourceT_$creturn ::
    a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta2 :: a) ->
                 let {
                   x :: GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                     {- Arity: 1 -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, eta2 #)
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x)
                   `cast`
                 (Trans
                      (<GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                       ->_R Nth:3
                                (Trans
                                     (<a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                     (<a>_R
                                      ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                    <GHC.Types.IO>_R) <a>_N)))
                      (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <a>_N)))) -}
de6d310a1e8b6fd1515b613ea68e172d
  $s$fMonadUnliftIONoLoggingT ::
    Control.Monad.IO.Unlift.MonadUnliftIO
      (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Main.$s$fMonadIONoLoggingT
                  (Control.Monad.Logger.$fMonadUnliftIONoLoggingT_$caskUnliftIO
                     @ GHC.Types.IO
                     Control.Monad.IO.Unlift.$fMonadUnliftIOIO)
                  Main.$s$fMonadUnliftIONoLoggingT_$s$fMonadUnliftIONoLoggingT_$cwithRunInIO -}
05358346a54dc1c2228e8b3596878e63
  $s$fMonadUnliftIONoLoggingT_$s$fMonadUnliftIONoLoggingT_$cwithRunInIO ::
    ((forall a.
      Control.Monad.Logger.NoLoggingT GHC.Types.IO a -> GHC.Types.IO a)
     -> GHC.Types.IO b)
    -> Control.Monad.Logger.NoLoggingT GHC.Types.IO b
  {- Arity: 2, Strictness: <L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ b
                   (ds :: (forall a.
                           Control.Monad.Logger.NoLoggingT GHC.Types.IO a -> GHC.Types.IO a)
                          -> GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Control.Monad.Logger.$fMonadUnliftIONoLoggingT_$caskUnliftIO
                         @ GHC.Types.IO
                         Control.Monad.IO.Unlift.$fMonadUnliftIOIO)
                        `cast`
                      (Trans
                           (Control.Monad.Logger.N:NoLoggingT[0]
                                <GHC.Types.IO>_R <Control.Monad.IO.Unlift.UnliftIO
                                                    (Control.Monad.Logger.NoLoggingT
                                                       GHC.Types.IO)>_N)
                           (GHC.Types.N:IO[0]
                                <Control.Monad.IO.Unlift.UnliftIO
                                   (Control.Monad.Logger.NoLoggingT GHC.Types.IO)>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (ds
                    ipv1
                      `cast`
                    (Control.Monad.IO.Unlift.N:UnliftIO[0]
                         <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R))
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (b :: <*>_N).
                 <(forall a.
                   Control.Monad.Logger.NoLoggingT GHC.Types.IO a -> GHC.Types.IO a)
                  -> GHC.Types.IO b>_R
                 ->_R Trans
                          (Sym (GHC.Types.N:IO[0] <b>_R))
                          (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                    <GHC.Types.IO>_R) <b>_N)) -}
3ecc4dac53e585d3dcce002a785e9704
  $s$fMonadUnliftIOResourceT ::
    Control.Monad.IO.Unlift.MonadUnliftIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
                  Main.$s$fMonadIOResourceT
                  (Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT1
                     @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                     Main.$s$fMonadUnliftIONoLoggingT)
                    `cast`
                  (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R
                            <Control.Monad.IO.Unlift.UnliftIO
                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                  (Control.Monad.Logger.NoLoggingT GHC.Types.IO))>_N))
                  Main.$s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO -}
1d10ce28d53e2b8240b7da29492d0ccf
  $s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO ::
    ((forall a.
      Control.Monad.Trans.Resource.Internal.ResourceT
        (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a
      -> GHC.Types.IO a)
     -> GHC.Types.IO b)
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO) b
  {- Arity: 3, Strictness: <L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ b
                   (ds :: (forall a.
                           Control.Monad.Trans.Resource.Internal.ResourceT
                             (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a
                           -> GHC.Types.IO a)
                          -> GHC.Types.IO b)
                   (r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT1
                         @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                         Main.$s$fMonadUnliftIONoLoggingT
                         r)
                        `cast`
                      (Trans
                           (Nth:2
                                (Trans
                                     (Control.Monad.Logger.N:NoLoggingT[0]
                                          <GHC.Types.IO>_R <Control.Monad.IO.Unlift.UnliftIO
                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                 (Control.Monad.Logger.NoLoggingT
                                                                    GHC.Types.IO))>_N
                                      ->_R (<Control.Monad.IO.Unlift.UnliftIO
                                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                                  (Control.Monad.Logger.NoLoggingT GHC.Types.IO))>_R
                                            ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                                     <GHC.Types.IO>_R <b>_N)
                                      ->_R Control.Monad.Logger.N:NoLoggingT[0]
                                               <GHC.Types.IO>_R <b>_N)
                                     (<GHC.Types.IO
                                         (Control.Monad.IO.Unlift.UnliftIO
                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                               (Control.Monad.Logger.NoLoggingT GHC.Types.IO)))>_R
                                      ->_R <Control.Monad.IO.Unlift.UnliftIO
                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                 (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
                                            -> GHC.Types.IO b>_R
                                      ->_R GHC.Types.N:IO[0] <b>_R)))
                           (GHC.Types.N:IO[0]
                                <Control.Monad.IO.Unlift.UnliftIO
                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                      (Control.Monad.Logger.NoLoggingT GHC.Types.IO))>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (ds
                    ipv1
                      `cast`
                    (Control.Monad.IO.Unlift.N:UnliftIO[0]
                         <Control.Monad.Trans.Resource.Internal.ResourceT
                            (Control.Monad.Logger.NoLoggingT GHC.Types.IO)>_R))
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (b :: <*>_N).
                 Trans
                     (<(forall a.
                        Control.Monad.Trans.Resource.Internal.ResourceT
                          (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a
                        -> GHC.Types.IO a)
                       -> GHC.Types.IO b>_R
                      ->_R <GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                      ->_R Nth:3
                               (Nth:3
                                    (Trans
                                         (<GHC.Types.IO
                                             (Control.Monad.IO.Unlift.UnliftIO
                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   (Control.Monad.Logger.NoLoggingT
                                                      GHC.Types.IO)))>_R
                                          ->_R <Control.Monad.IO.Unlift.UnliftIO
                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                     (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
                                                -> GHC.Types.IO b>_R
                                          ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                                         (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                   <GHC.Types.IO>_R) <Control.Monad.IO.Unlift.UnliftIO
                                                                        (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                           (Control.Monad.Logger.NoLoggingT
                                                                              GHC.Types.IO))>_N
                                          ->_R (<Control.Monad.IO.Unlift.UnliftIO
                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                      (Control.Monad.Logger.NoLoggingT
                                                         GHC.Types.IO))>_R
                                                ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                              <GHC.Types.IO>_R) <b>_N)
                                          ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                        <GHC.Types.IO>_R) <b>_N))))
                     (<(forall a.
                        Control.Monad.Trans.Resource.Internal.ResourceT
                          (Control.Monad.Logger.NoLoggingT GHC.Types.IO) a
                        -> GHC.Types.IO a)
                       -> GHC.Types.IO b>_R
                      ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                    <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R <b>_N))) -}
ecc57c3e37bdf169f24558972c441f75
  $screateSqlitePoolFromInfo2 ::
    (Database.Persist.Class.PersistStore.IsPersistBackend
       Database.Persist.Sql.Types.Internal.SqlBackend,
     (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
     Data.Type.Equality.~
     (Database.Persist.Sql.Types.Internal.SqlBackend :: *))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Database.Persist.Sql.Types.Internal.$fIsPersistBackendSqlBackend,
                  Main.$fToBackendKeySqlBackendToDo_$d~~
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <Database.Persist.Sql.Types.Internal.SqlBackend>_N <Database.Persist.Sql.Types.Internal.SqlBackend>_N))) -}
57447fde9b164a761de9e1d311c2aec9
  $tc'ToDo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10818126254787073335##
                   17959810866269167014##
                   Main.$trModule
                   Main.$tc'ToDo2
                   0#
                   Main.$tc'ToDo1) -}
a6806193a77ce5fc04ea471f390e15bf
  $tc'ToDo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5ad55cb11415aa94890b1c6e2d051746
  $tc'ToDo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ToDo3) -}
237e502524b7b337faa1448ca49d8b0f
  $tc'ToDo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ToDo"#) -}
36357c80ea24f0a68c76cb83c746aa3b
  $tc'ToDoDescription :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17827855572809163404##
                   10357803695544558405##
                   Main.$trModule
                   Main.$tc'ToDoDescription2
                   1#
                   Main.$tc'ToDoDescription1) -}
1cbf376f66b11cd37c46239fdfe82728
  $tc'ToDoDescription1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dd78a50f672adfe127d1660f6e0d7bce
  $tc'ToDoDescription2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ToDoDescription3) -}
7c350753b1b253f83484a20970e4ecdb
  $tc'ToDoDescription3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ToDoDescription"#) -}
0a291069ac901d3d426b6af3a7e62255
  $tc'ToDoId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6667593522864425202##
                   8643509632073700997##
                   Main.$trModule
                   Main.$tc'ToDoId2
                   1#
                   Main.$tc'ToDoId1) -}
e845ed56c3a43b56a9e7092e1c96e31d
  $tc'ToDoId1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
073a545a95cbc1dc09b1666e79e6fde0
  $tc'ToDoId2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ToDoId3) -}
cbc6d9aca4d7c45933959fdf5b17e488
  $tc'ToDoId3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ToDoId"#) -}
624d999fb848568d5b88c98a4c443f9c
  $tc'ToDoKey :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15469862999443134477##
                   7961114219161341324##
                   Main.$trModule
                   Main.$tc'ToDoKey2
                   0#
                   Main.$tc'ToDoKey1) -}
cc7273814a3201bad7483e07da348ccb
  $tc'ToDoKey1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dbb666042dad307364c338a13c0972cc
  $tc'ToDoKey2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ToDoKey3) -}
9ad6319014915de69eade72703fbbeaa
  $tc'ToDoKey3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ToDoKey"#) -}
e34cf61778e15b44be8c3c56348d1591
  $tc'ToDoTitle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5678992444333285576##
                   6210157455104074110##
                   Main.$trModule
                   Main.$tc'ToDoTitle1
                   1#
                   Main.$tc'ToDoDescription1) -}
7cdf1936d46aa681e7263c228fa496b0
  $tc'ToDoTitle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ToDoTitle2) -}
90823885b1eb76e9fff122e3d65b2e76
  $tc'ToDoTitle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ToDoTitle"#) -}
2d913df56f1190edbbb17a3d8fc1c1c2
  $tcToDo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12452044097588050001##
                   10439911731598489932##
                   Main.$trModule
                   Main.$tcToDo1
                   0#
                   GHC.Types.krep$*) -}
55c9cd3a04a0028cf56647437d950b8e
  $tcToDo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$fPersistEntityToDo22) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.ToDo
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
747725d20511425531a84593820423eb
  $w$cshow :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowToDo4
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowToDo3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.$fShow(,)3
                         (GHC.Show.showLitString
                            ww
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.$fShow(,)3
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  GHC.Show.showCommaSpace1
                                  (GHC.CString.unpackAppendCString#
                                     Main.$fShowToDo2
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)3
                                        (GHC.Show.showLitString ww1 Main.$fShowToDo5))))))))) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Database.Persist.Class.PersistEntity.Key Main.ToDo
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Database.Persist.Class.PersistEntity.Key Main.ToDo)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowKey4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowKey3
                           (Database.Persist.Sql.Orphan.PersistStore.$w$cshowsPrec
                              0#
                              w `cast` (Trans (Main.D:R:KeyToDo0[0]) (Main.N:R:KeyToDo[0]))
                              (GHC.CString.unpackAppendCString# Main.$fShowKey2 w1)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowKey4
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowKey3
                              (Database.Persist.Sql.Orphan.PersistStore.$w$cshowsPrec
                                 0#
                                 w `cast` (Trans (Main.D:R:KeyToDo0[0]) (Main.N:R:KeyToDo[0]))
                                 (GHC.CString.unpackAppendCString#
                                    Main.$fShowKey2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }) -}
c34829470e1105e550bcb442315015a9
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Main.$fShowToDo4
                       (GHC.CString.unpackAppendCString#
                          Main.$fShowToDo3
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)3
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      GHC.Show.showCommaSpace1
                                      (GHC.CString.unpackAppendCString#
                                         Main.$fShowToDo2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)3
                                            (GHC.Show.showLitString
                                               ww2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.$fShow(,)3
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowKey2
                                                     x))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
22c9da2794d42ea4af398cabf79fcc80
  $w$ctoJSON ::
    GHC.Base.String
    -> GHC.Base.String -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: GHC.Base.String) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ GHC.Prim.RealWorld
                                10#
                                s1 of ds1 { (#,#) ipv ipv1 ->
                         Main.$wouter4 ipv1 4# ww 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                 case Main.$fPersistEntityToDo10 of ww2 { Data.Text.Internal.Text ww3 ww4 ww5 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww3
                        ww4
                        ww5
                        (Data.Aeson.Types.Internal.String dt)
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ GHC.Prim.RealWorld
                                10#
                                s1 of ds2 { (#,#) ipv5 ipv6 ->
                         Main.$wouter3 ipv6 4# ww1 0# ipv5 }) of ds2 { (#,#) ipv5 ipv6 ->
                 case ipv6 of dt1 { Data.Text.Internal.Text ipv7 ipv8 ipv9 ->
                 case Main.$fPersistEntityToDo7 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww7
                        ww8
                        ww9
                        (Data.Aeson.Types.Internal.String dt1)
                        z23 of dt2 { DEFAULT ->
                 (# dt2 #) } } } } } } } }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  $w$ctoPersistValue ::
    Main.ToDo
    -> (# [(Data.Text.Internal.Text,
            Database.Persist.Types.Base.PersistValue)] #)
  {- Arity: 1, Strictness: <L,1*U(U,U)>, Inline: [0],
     Unfolding: (\ (w :: Main.ToDo) ->
                 (# case w of wild { Main.ToDo x x1 ->
                    GHC.Types.:
                      @ (Data.Text.Internal.Text,
                         Database.Persist.Types.Base.PersistValue)
                      (Main.$fPersistFieldToDo5,
                       Database.Persist.Types.Base.PersistText
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s1 of ds1 { (#,#) ipv ipv1 ->
                                  Database.Persist.Class.PersistField.$wouter6
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds1 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      (GHC.Types.:
                         @ (Data.Text.Internal.Text,
                            Database.Persist.Types.Base.PersistValue)
                         (Main.$fPersistFieldToDo3,
                          Database.Persist.Types.Base.PersistText
                            (case GHC.Magic.runRW#
                                    @ ('GHC.Types.TupleRep
                                         '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Text.Internal.Text #)
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case GHC.Prim.newByteArray#
                                            @ GHC.Prim.RealWorld
                                            10#
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     Database.Persist.Class.PersistField.$wouter6
                                       ipv1
                                       4#
                                       x1
                                       0#
                                       ipv }) of ds1 { (#,#) ipv ipv1 ->
                             ipv1 }))
                         (GHC.Types.[]
                            @ (Data.Text.Internal.Text,
                               Database.Persist.Types.Base.PersistValue))) } #)) -}
f5f1bb10fa1b5e3af6f88901e97b40ec
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><S,U><S,U><S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> Data.HashMap.Array.Array
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     <join 7> {- Arity: 7,
                                 Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexSmallArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds1 { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                               case GHC.Prim.narrow32Int# ds3 of wild4 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Magic.runRW#
                                           @ ('GHC.Types.TupleRep
                                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                Data.HashMap.Array.Array
                                                  (Data.HashMap.Base.Leaf
                                                     Data.Text.Internal.Text v) #)
                                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                            case GHC.Prim.thawSmallArray#
                                                   @ (Data.HashMap.Base.Leaf
                                                        Data.Text.Internal.Text v)
                                                   @ GHC.Prim.RealWorld
                                                   ww6
                                                   0#
                                                   (GHC.Prim.sizeofSmallArray#
                                                      @ (Data.HashMap.Base.Leaf
                                                           Data.Text.Internal.Text v)
                                                      ww6)
                                                   s1 of ds4 { (#,#) ipv4 ipv5 ->
                                            case GHC.Prim.writeSmallArray#
                                                   @ GHC.Prim.RealWorld
                                                   @ (Data.HashMap.Base.Leaf
                                                        Data.Text.Internal.Text v)
                                                   ipv5
                                                   ww7
                                                   (Data.HashMap.Base.L
                                                      @ Data.Text.Internal.Text
                                                      @ v
                                                      k2
                                                      (w k2 w3 y))
                                                   ipv4 of s' { DEFAULT ->
                                            case GHC.Prim.unsafeFreezeSmallArray#
                                                   @ GHC.Prim.RealWorld
                                                   @ (Data.HashMap.Base.Leaf
                                                        Data.Text.Internal.Text v)
                                                   ipv5
                                                   s' of ds5 { (#,#) ipv6 ipv7 ->
                                            (# ipv6,
                                               Data.HashMap.Array.$WArray
                                                 @ (Data.HashMap.Base.Leaf
                                                      Data.Text.Internal.Text v)
                                                 ipv7 #) } } }) of ds4 { (#,#) ipv4 ipv5 ->
                                    ipv5 } } } } } } }
                       GHC.Types.True
                       -> case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.HashMap.Array.Array
                                        (Data.HashMap.Base.Leaf Data.Text.Internal.Text v) #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newSmallArray#
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.+# ww8 1#)
                                         (Data.HashMap.Array.undefinedElem
                                            @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                         s1 of ds { (#,#) ipv3 ipv4 ->
                                  case GHC.Prim.copySmallArray#
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         @ GHC.Prim.RealWorld
                                         ww6
                                         0#
                                         ipv4
                                         0#
                                         ww8
                                         ipv3 of s2 { DEFAULT ->
                                  case GHC.Prim.writeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         ipv4
                                         ww8
                                         (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                         s2 of s' { DEFAULT ->
                                  case GHC.Prim.unsafeFreezeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         ipv4
                                         s' of ds2 { (#,#) ipv5 ipv6 ->
                                  (# ipv5,
                                     Data.HashMap.Array.$WArray
                                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                       ipv6 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                          ipv4 } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofSmallArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
8cf3e1380e5bee7149b5f0f297fad5ee
  $w$sgo13 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
352cb6eaba2bab85127d937d190c672e
  $w$slookup ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.7.0 GHC.Prim.ByteArray#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Main.$wpoly_go1 @ v (GHC.Prim.int2Word# ds2) ww ww1 ww2 0# w }) -}
62b61fac01f3a6eb72202b8e0a51e5b5
  $w$sunsafeInsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
                        (\ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case {__pkg_ccall hashable-1.2.7.0 GHC.Prim.ByteArray#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Int# #)}
                                ww
                                (GHC.Prim.uncheckedIShiftL# ww1 1#)
                                (GHC.Prim.uncheckedIShiftL# ww2 1#)
                                -2578643520546668380#
                                GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                         Main.$wpoly_go3
                           @ v
                           (GHC.Prim.int2Word# ds2)
                           ww
                           ww1
                           ww2
                           w
                           0#
                           w1
                           w2 }) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b7f93016561714aa5b53c8c6fc0edebc
  $winner ::
    Data.Text.Array.MArray s1
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Lazy.Text #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,U><L,1*U><S,U><S,U>,
     Inline: [0] -}
7b5696b248dc938e6ff182184fd93901
  $winner1 ::
    Data.Text.Array.MArray s1
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Lazy.Text #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,U><L,1*U><S,U><S,U>,
     Inline: [0] -}
9b069431b7e96d98dbf4fe6a557e8487
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
facbb7af431ebda557cdc8ea5dce3bdd
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
82c98608497adf0f48c65f23cec0346b
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
7f9f2fefa33d0a10b917cd533b433a1d
  $wouter3 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
46c1733a8c576e816c3e1a38ff7de2f6
  $wouter4 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
37a957f4453bd74d86b5d41f7e04380a
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>, Inline: [0] -}
1c9b43aac04b84c5dc1661bc0d8b289e
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
2d953873f4101a3be0c95b70b6c9a510
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><S,U><S,U>, Inline: [0] -}
145e1283100b3139501084a7226c2ae4
  $wpoly_go3 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [0] -}
6d3271018a6bee1d37455a84fb9398a5
  $wroutes ::
    Web.Scotty.Internal.Types.ScottyState
      Data.Text.Internal.Lazy.Text GHC.Types.IO
    -> (# (),
          Web.Scotty.Internal.Types.ScottyState
            Data.Text.Internal.Lazy.Text GHC.Types.IO #)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: Web.Scotty.Internal.Types.ScottyState
                           Data.Text.Internal.Lazy.Text GHC.Types.IO) ->
                 (# GHC.Tuple.(),
                    case w of wild { Web.Scotty.Internal.Types.ScottyState ds ds1 ds2 ->
                    Web.Scotty.Internal.Types.ScottyState
                      @ Data.Text.Internal.Lazy.Text
                      @ GHC.Types.IO
                      ds
                      (GHC.Types.:
                         @ (Web.Scotty.Internal.Types.Middleware GHC.Types.IO)
                         (Web.Scotty.Route.route
                            @ Data.Text.Internal.Lazy.Text
                            @ GHC.Types.IO
                            Web.Scotty.Internal.Types.$fScottyErrorText
                            Control.Monad.IO.Class.$fMonadIOIO
                            ds2
                            Web.Scotty.get2
                            Main.main22
                            Main.main15
                              `cast`
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <Web.Scotty.Internal.Types.ActionEnv>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              Web.Scotty.Internal.Types.ScottyResponse
                                              GHC.Types.IO>_R
                                           <Data.Either.Either
                                              (Web.Scotty.Internal.Types.ActionError
                                                 Data.Text.Internal.Lazy.Text)
                                              ()>_N))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                <Web.Scotty.Internal.Types.ActionError
                                                   Data.Text.Internal.Lazy.Text>_N
                                                <Control.Monad.Trans.Reader.ReaderT
                                                   Web.Scotty.Internal.Types.ActionEnv
                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                      Web.Scotty.Internal.Types.ScottyResponse
                                                      GHC.Types.IO)>_R
                                                <()>_N))
                                      (Sym (Web.Scotty.Internal.Types.N:ActionT[0]
                                                <Data.Text.Internal.Lazy.Text>_N
                                                <GHC.Types.IO>_R) <()>_N))))
                         (GHC.Types.:
                            @ (Web.Scotty.Internal.Types.Middleware GHC.Types.IO)
                            (Web.Scotty.Route.route
                               @ Data.Text.Internal.Lazy.Text
                               @ GHC.Types.IO
                               Web.Scotty.Internal.Types.$fScottyErrorText
                               Control.Monad.IO.Class.$fMonadIOIO
                               ds2
                               Web.Scotty.get2
                               Main.main11
                               Main.main10
                                 `cast`
                               (Trans
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Web.Scotty.Internal.Types.ActionEnv>_R
                                              <Control.Monad.Trans.State.Lazy.StateT
                                                 Web.Scotty.Internal.Types.ScottyResponse
                                                 GHC.Types.IO>_R
                                              <Data.Either.Either
                                                 (Web.Scotty.Internal.Types.ActionError
                                                    Data.Text.Internal.Lazy.Text)
                                                 ()>_N))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                   <Web.Scotty.Internal.Types.ActionError
                                                      Data.Text.Internal.Lazy.Text>_N
                                                   <Control.Monad.Trans.Reader.ReaderT
                                                      Web.Scotty.Internal.Types.ActionEnv
                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                         Web.Scotty.Internal.Types.ScottyResponse
                                                         GHC.Types.IO)>_R
                                                   <()>_N))
                                         (Sym (Web.Scotty.Internal.Types.N:ActionT[0]
                                                   <Data.Text.Internal.Lazy.Text>_N
                                                   <GHC.Types.IO>_R) <()>_N))))
                            (GHC.Types.:
                               @ (Web.Scotty.Internal.Types.Middleware GHC.Types.IO)
                               (Web.Scotty.Route.route
                                  @ Data.Text.Internal.Lazy.Text
                                  @ GHC.Types.IO
                                  Web.Scotty.Internal.Types.$fScottyErrorText
                                  Control.Monad.IO.Class.$fMonadIOIO
                                  ds2
                                  Web.Scotty.get2
                                  Main.main6
                                  Main.main3)
                               ds1)))
                      ds2 } #)) -}
bf29d444ff89d2b9cf9b527f5c48f131
  $wshowl ::
    [Database.Persist.Class.PersistEntity.Entity Main.ToDo]
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
6d9d94a0e35e92a96ec7cbeed3917d82
  axiom Main.D:R:EntityFieldToDotyp0::
      Database.Persist.Class.PersistEntity.EntityField Main.ToDo
        = Main.R:EntityFieldToDotyp
6d9d94a0e35e92a96ec7cbeed3917d82
  axiom Main.D:R:KeyToDo0::
      Database.Persist.Class.PersistEntity.Key Main.ToDo = Main.R:KeyToDo
6d9d94a0e35e92a96ec7cbeed3917d82
  axiom Main.D:R:PersistEntityBackendToDo::
      Database.Persist.Class.PersistEntity.PersistEntityBackend Main.ToDo
        = Database.Persist.Sql.Types.Internal.SqlBackend
5b4571148659bb2ece7cc2cb3ef25a12
  axiom Main.D:R:UniqueToDo0::
      Database.Persist.Class.PersistEntity.Unique Main.ToDo
        = Main.R:UniqueToDo
6d9d94a0e35e92a96ec7cbeed3917d82
  data instance Database.Persist.Class.PersistEntity.EntityField
                  Main.ToDo typ where
    ToDoId :: (typ :: *)
              Data.Type.Equality.~
              (Database.Persist.Class.PersistEntity.Key Main.ToDo :: *) =>
              Database.Persist.Class.PersistEntity.EntityField Main.ToDo typ
    ToDoTitle :: (typ :: *)
                 Data.Type.Equality.~
                 (GHC.Base.String :: *) =>
                 Database.Persist.Class.PersistEntity.EntityField Main.ToDo typ
    ToDoDescription :: (typ :: *)
                       Data.Type.Equality.~
                       (GHC.Base.String :: *) =>
                       Database.Persist.Class.PersistEntity.EntityField Main.ToDo typ
6d9d94a0e35e92a96ec7cbeed3917d82
  newtype instance Database.Persist.Class.PersistEntity.Key Main.ToDo
    = ToDoKey {unToDoKey :: Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.Internal.SqlBackend}
5b4571148659bb2ece7cc2cb3ef25a12
  data instance Database.Persist.Class.PersistEntity.Unique Main.ToDo
6d9d94a0e35e92a96ec7cbeed3917d82
  data ToDo
    = ToDo {toDoTitle :: !GHC.Base.String,
            toDoDescription :: !GHC.Base.String}
4071387657efbf8a1c4d9b283ec34c49
  type ToDoId = Database.Persist.Class.PersistEntity.Key Main.ToDo
34280f419ef5910f78e65e6f54654dcb
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7a9d3f5ca23f27381c8fc3cee4dd9e6a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main29
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 (Web.Scotty.Trans.scottyOptsT
                    @ GHC.Types.IO
                    @ GHC.Types.IO
                    @ Data.Text.Internal.Lazy.Text
                    GHC.Base.$fMonadIO
                    Control.Monad.IO.Class.$fMonadIOIO
                    Main.main26
                    (GHC.Base.id @ (GHC.Types.IO Network.Wai.Internal.Response))
                    Main.main2
                      `cast`
                    (Trans
                         (<Web.Scotty.Internal.Types.ScottyState
                             Data.Text.Internal.Lazy.Text GHC.Types.IO>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <((),
                                          Web.Scotty.Internal.Types.ScottyState
                                            Data.Text.Internal.Lazy.Text GHC.Types.IO)>_R))
                         (Trans
                              (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <Web.Scotty.Internal.Types.ScottyState
                                           Data.Text.Internal.Lazy.Text GHC.Types.IO>_N
                                        <Data.Functor.Identity.Identity>_R
                                        <()>_N))
                              (Sym (Web.Scotty.Internal.Types.N:ScottyT[0]
                                        <Data.Text.Internal.Lazy.Text>_N
                                        <GHC.Types.IO>_N) <()>_N))))
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv }) -}
2184c12c8905442eaeaaf518dcbcc72e
  main10 ::
    Web.Scotty.Internal.Types.ActionEnv
    -> Control.Monad.Trans.State.Lazy.StateT
         Web.Scotty.Internal.Types.ScottyResponse
         GHC.Types.IO
         (Data.Either.Either
            (Web.Scotty.Internal.Types.ActionError
               Data.Text.Internal.Lazy.Text)
            ())
  {- Arity: 1, Strictness: <L,U> -}
2c3f887c6b311897a6ecc05a59177ea7
  main11 :: Web.Scotty.Internal.Types.RoutePattern
  {- Strictness: m1,
     Unfolding: (Web.Scotty.Internal.Types.Capture Main.main12) -}
677df28cc48b7b6042a53a8e303a3765
  main12 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (case GHC.Base.map
                        @ GHC.Types.Char
                        @ GHC.Types.Char
                        Data.Text.Internal.safe
                        Main.main13 of dt { DEFAULT ->
                 Web.Scotty.Internal.Types.$fIsStringRoutePattern_outer dt }) -}
470bd357ae9b9f4a7cbfbc5a17859b65
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main14) -}
550aaf754ed7e4f0b49e86fd0a814ca9
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/hello/:name"#) -}
3a72ef44fcfcbbf486de186e7f2f64ec
  main15 ::
    Web.Scotty.Internal.Types.ActionEnv
    -> Control.Monad.Trans.State.Lazy.StateT
         Web.Scotty.Internal.Types.ScottyResponse
         GHC.Types.IO
         (Data.Either.Either
            (Web.Scotty.Internal.Types.ActionError
               Data.Text.Internal.Lazy.Text)
            ())
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (w4 :: Web.Scotty.Internal.Types.ActionEnv) ->
                 Web.Scotty.Internal.Types.$w$c>>=
                   @ GHC.Types.IO
                   @ Data.Text.Internal.Lazy.Text
                   GHC.Base.$fMonadIO
                   @ [Database.Persist.Class.PersistEntity.Entity Main.ToDo]
                   @ ()
                   Main.main19
                   Main.main16
                   w4) -}
f13378353c75b73ff8db92dfb0ac9e1b
  main16 ::
    [Database.Persist.Class.PersistEntity.Entity Main.ToDo]
    -> Web.Scotty.Internal.Types.ActionT
         Data.Text.Internal.Lazy.Text GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (_ToDo :: [Database.Persist.Class.PersistEntity.Entity
                                Main.ToDo]) ->
                 Web.Scotty.Action.$wtext
                   @ Data.Text.Internal.Lazy.Text
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   (case _ToDo of wild {
                      [] -> Main.main_outer1 Main.main17
                      : x xs
                      -> case GHC.Base.map
                                @ GHC.Types.Char
                                @ GHC.Types.Char
                                Data.Text.Internal.safe
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__3
                                   (case x of ww2 { Database.Persist.Class.PersistEntity.Entity ww3 ww4 ->
                                    Database.Persist.Class.PersistEntity.$w$cshowsPrec
                                      @ Main.ToDo
                                      Main.$fShowKey
                                      Main.$fShowToDo
                                      0#
                                      ww3
                                      ww4
                                      (case Main.$wshowl xs of ww { (#,#) ww1 ww5 ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         ww1
                                         ww5 }) })) of dt { DEFAULT ->
                         Main.main_outer dt } })) -}
29fd212df4389203c806ae4ca627ed39
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Data.Text.Internal.safe
                   Main.main18) -}
add5f819f9976a51d0ea8551ee90bd38
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
22a8eb2af072c73c1e1f651775ec20f1
  main19 ::
    Web.Scotty.Internal.Types.ActionT
      Data.Text.Internal.Lazy.Text
      GHC.Types.IO
      [Database.Persist.Class.PersistEntity.Entity Main.ToDo]
  {- Unfolding: (Web.Scotty.Internal.Types.$w$cliftIO
                   @ Data.Text.Internal.Lazy.Text
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO
                   @ [Database.Persist.Class.PersistEntity.Entity Main.ToDo]
                   Main.main20
                     `cast`
                   (Control.Monad.Logger.N:NoLoggingT[0]
                        <GHC.Types.IO>_R <[Database.Persist.Class.PersistEntity.Entity
                                             Main.ToDo]>_N)) -}
44da89e67a15c4f9fa4787be89ed9f4b
  main2 ::
    Web.Scotty.Internal.Types.ScottyState
      Data.Text.Internal.Lazy.Text GHC.Types.IO
    -> ((),
        Web.Scotty.Internal.Types.ScottyState
          Data.Text.Internal.Lazy.Text GHC.Types.IO)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Web.Scotty.Internal.Types.ScottyState
                           Data.Text.Internal.Lazy.Text GHC.Types.IO) ->
                 case Main.$wroutes w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
215fbe2f72c283f91b751be09a2d4dba
  main20 ::
    Control.Monad.Logger.NoLoggingT
      GHC.Types.IO
      [Database.Persist.Class.PersistEntity.Entity Main.ToDo]
  {- Unfolding: (Control.Monad.Trans.Resource.runResourceT
                   @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                   @ [Database.Persist.Class.PersistEntity.Entity Main.ToDo]
                   Main.$s$fMonadUnliftIONoLoggingT
                   Main.main21
                     `cast`
                   (Trans
                        (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Nth:3
                                  (Nth:3
                                       (Trans
                                            (<GHC.Types.IO
                                                Database.Persist.Sql.Types.Internal.LogFunc>_R
                                             ->_R <Database.Persist.Sql.Types.Internal.LogFunc
                                                   -> GHC.Types.IO
                                                        [Database.Persist.Class.PersistEntity.Entity
                                                           Main.ToDo]>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <[Database.Persist.Class.PersistEntity.Entity
                                                               Main.ToDo]>_R))
                                            (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                      <GHC.Types.IO>_R) <Database.Persist.Sql.Types.Internal.LogFunc>_N
                                             ->_R (<Database.Persist.Sql.Types.Internal.LogFunc>_R
                                                   ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                                 <GHC.Types.IO>_R) <[Database.Persist.Class.PersistEntity.Entity
                                                                                       Main.ToDo]>_N)
                                             ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                           <GHC.Types.IO>_R) <[Database.Persist.Class.PersistEntity.Entity
                                                                                 Main.ToDo]>_N))))
                        (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                  <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R
                                  <[Database.Persist.Class.PersistEntity.Entity Main.ToDo]>_N)))) -}
878f1e660938b9b155a0e8e9b3c1031d
  main21 ::
    GHC.IORef.IORef Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Database.Persist.Class.PersistEntity.Entity Main.ToDo] #)
  {- Arity: 2, Strictness: <L,U><S,U> -}
c04feca57df7c99435dc17f96d3b2a3d
  main22 :: Web.Scotty.Internal.Types.RoutePattern
  {- Strictness: m1,
     Unfolding: (Web.Scotty.Internal.Types.Capture Main.main23) -}
052187b8a9cce76ed21a5822c8e5778e
  main23 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (case GHC.Base.map
                        @ GHC.Types.Char
                        @ GHC.Types.Char
                        Data.Text.Internal.safe
                        Main.main24 of dt { DEFAULT ->
                 Web.Scotty.Internal.Types.$fIsStringRoutePattern_outer dt }) -}
2743b4bce5fda857624bb63d06aa5612
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main25) -}
489e3d672cd2ae54a1d04fffb234019f
  main25 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/todos"#) -}
2a0f2aed372c8f3a3c9b2fb988538a61
  main26 :: Web.Scotty.Internal.Types.Options
  {- Strictness: m,
     Unfolding: (Web.Scotty.Internal.Types.Options
                   Web.Scotty.Internal.Types.$fDefaultOptions1
                   Main.main27) -}
8ff842a3cfd65f8147cc28bfb76a31e0
  main27 :: Network.Wai.Handler.Warp.Settings.Settings
  {- Unfolding: (Network.Wai.Handler.Warp.Settings.Settings
                   Main.main28
                   Network.Wai.Handler.Warp.Settings.defaultSettings16
                   Network.Wai.Handler.Warp.Settings.defaultOnException1
                     `cast`
                   (<GHC.Base.Maybe Network.Wai.Internal.Request>_R
                    ->_R <GHC.Exception.SomeException>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultOnExceptionResponse
                   Network.Wai.Handler.Warp.Settings.defaultSettings15
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings14
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings13
                   (GHC.Base.Nothing @ Network.Wai.Handler.Warp.Timeout.Manager)
                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                   Network.Wai.Handler.Warp.Settings.defaultSettings11
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings10
                     `cast`
                   (<(forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Types.IO ()>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   GHC.Types.False
                   Network.Wai.Handler.Warp.Settings.defaultSettings9
                     `cast`
                   (<GHC.Types.IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings6
                   Network.Wai.Handler.Warp.Settings.defaultSettings4
                   Network.Wai.Handler.Warp.Settings.ProxyProtocolNone
                   Network.Wai.Handler.Warp.Settings.defaultSettings3
                   GHC.Types.True
                   Network.Wai.Handler.Warp.Settings.defaultSettings2
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Network.HTTP.Types.Status.Status>_R
                    ->_R <GHC.Base.Maybe GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings1
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
af9982c5ba9f14766653940c8a2e1315
  main28 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7777#) -}
1819016634ac0eeb8ef65d7c50ca3c75
  main29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main30) -}
70c0c1bcf7cfdc107131b236497efb79
  main3 ::
    Web.Scotty.Internal.Types.ActionT
      Data.Text.Internal.Lazy.Text GHC.Types.IO ()
  {- Unfolding: (Web.Scotty.Action.$wtext
                   @ Data.Text.Internal.Lazy.Text
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   Main.main4) -}
165f3d3425a8ad3c5aae8b431bfe0e70
  main30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Starting server...."#) -}
fbd772a53aa360fb18daebfdc34f20b1
  main31 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
2cea9efd5edb458de0e2a80b821cb4a7
  main4 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (Data.Text.Lazy.unpackCString# Main.main5) -}
690d87255f37bd50a37149a2988b9c64
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("hello world!"#) -}
5bd9fb1c7ae4960942a875144b66aa26
  main6 :: Web.Scotty.Internal.Types.RoutePattern
  {- Strictness: m1,
     Unfolding: (Web.Scotty.Internal.Types.Capture Main.main7) -}
499a7afe93f5a8d5f05394d4b6efdafc
  main7 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (case GHC.Base.map
                        @ GHC.Types.Char
                        @ GHC.Types.Char
                        Data.Text.Internal.safe
                        Main.main8 of dt { DEFAULT ->
                 Web.Scotty.Internal.Types.$fIsStringRoutePattern_outer dt }) -}
36854f78b6c27cc6b83f54fb50e4295f
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main9) -}
3a9e132c64b77f8690c5c0e2046b49bd
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/hello"#) -}
298d090c3dfbee6981724dc21f34bd3b
  main_outer :: [GHC.Types.Char] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (so :: [GHC.Types.Char]) ->
                 case so of wild {
                   [] -> Data.Text.Internal.Lazy.Empty
                   : x xs
                   -> case x of dt { GHC.Types.C# ipv ->
                      case xs of dt1 { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Text.Internal.Lazy.Text #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     s1 of ds1 { (#,#) ipv1 ipv2 ->
                              let {
                                x1 :: GHC.Prim.Int# = GHC.Prim.ord# ipv
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# x1 65536#) of wild3 {
                                GHC.Types.False
                                -> let {
                                     x# :: GHC.Prim.Int# = GHC.Prim.-# x1 65536#
                                   } in
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                   55296#)))
                                          ipv1 of s2# { DEFAULT ->
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          1#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                          s2# of s2#1 { DEFAULT ->
                                   Main.$winner
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     2#
                                     s2#1 } }
                                GHC.Types.True
                                -> case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x1))
                                          ipv1 of s2# { DEFAULT ->
                                   Main.$winner
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     1#
                                     s2# } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      ipv2 } } } }) -}
909aa436cbd36965bda69e4d21880d81
  main_outer1 :: [GHC.Types.Char] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (so :: [GHC.Types.Char]) ->
                 case so of wild {
                   [] -> Data.Text.Internal.Lazy.Empty
                   : x xs
                   -> case x of dt { GHC.Types.C# ipv ->
                      case xs of dt1 { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Text.Internal.Lazy.Text #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     s1 of ds1 { (#,#) ipv1 ipv2 ->
                              let {
                                x1 :: GHC.Prim.Int# = GHC.Prim.ord# ipv
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# x1 65536#) of wild3 {
                                GHC.Types.False
                                -> let {
                                     x# :: GHC.Prim.Int# = GHC.Prim.-# x1 65536#
                                   } in
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                   55296#)))
                                          ipv1 of s2# { DEFAULT ->
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          1#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                          s2# of s2#1 { DEFAULT ->
                                   Main.$winner1
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     2#
                                     s2#1 } }
                                GHC.Types.True
                                -> case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x1))
                                          ipv1 of s2# { DEFAULT ->
                                   Main.$winner1
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     1#
                                     s2# } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      ipv2 } } } }) -}
dde71cd0c9667d4955bacbc400025d12
  migrateAll :: Database.Persist.Sql.Types.Migration
  {- Arity: 2,
     Strictness: <S(LLLLLLLC(C(C(C(S(SS)))))LLLLLLLLL),1*U(C(C1(U(U,U(C(U(U,A)),C(U(U,U)),C(C1(U(U,U))),C(C1(C1(C1(U)))))))),A,A,A,A,U(U),A,1*C1(C1(C1(C1(U(U,1*U))))),A,A,A,A,A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.migrateAll1
                  `cast`
                (Trans
                     (<Database.Persist.Sql.Types.Internal.SqlBackend>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(((), [Data.Text.Internal.Text]),
                                      Database.Persist.Sql.Types.CautiousMigration)>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <GHC.Types.IO>_R
                                    <(((), [Data.Text.Internal.Text]),
                                      Database.Persist.Sql.Types.CautiousMigration)>_N))
                          (Trans
                               (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                         <Database.Persist.Sql.Types.CautiousMigration>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Database.Persist.Sql.Types.Internal.SqlBackend
                                            GHC.Types.IO>_R
                                         <((), [Data.Text.Internal.Text])>_N))
                               (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                         <[Data.Text.Internal.Text]>_N
                                         <Control.Monad.Trans.Writer.Lazy.WriterT
                                            Database.Persist.Sql.Types.CautiousMigration
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Database.Persist.Sql.Types.Internal.SqlBackend
                                               GHC.Types.IO)>_R
                                         <()>_N))))) -}
0c8dad48d37816b89f4de39e367c006a
  migrateAll1 ::
    Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (((), [Data.Text.Internal.Text]),
           Database.Persist.Sql.Types.CautiousMigration) #)
  {- Arity: 2,
     Strictness: <S(LLLLLLLC(C(C(C(S(SS)))))LLLLLLLLL),1*U(C(C1(U(U,U(C(U(U,A)),C(U(U,U)),C(C1(U(U,U))),C(C1(C1(C1(U)))))))),A,A,A,A,U(U),A,1*C1(C1(C1(C1(U(U,1*U))))),A,A,A,A,A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: Database.Persist.Sql.Types.Internal.SqlBackend)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w2 of ww { Database.Persist.Sql.Types.Internal.SqlBackend ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Database.Persist.Sql.Migration.$wmigrate
                   Main.migrateAll2
                   Main.$fPersistEntityToDo25
                   ww1
                   ww6
                   ww8
                   w3 }) -}
289a433188b6f1ecb9d24764ef53844a
  migrateAll2 :: [Database.Persist.Types.Base.EntityDef]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EntityDef
                   Main.$fPersistEntityToDo25
                   (GHC.Types.[] @ Database.Persist.Types.Base.EntityDef)) -}
d8b8fb9b58fb45a2e1dca5f72f7d85c4
  readToDo ::
    GHC.Types.IO
      [Database.Persist.Class.PersistEntity.Entity Main.ToDo]
  {- Unfolding: InlineRule (0, True, True)
                Main.main20
                  `cast`
                (Control.Monad.Logger.N:NoLoggingT[0]
                     <GHC.Types.IO>_R <[Database.Persist.Class.PersistEntity.Entity
                                          Main.ToDo]>_N) -}
d0ae1e53c55b3639b2424c32da1d887b
  routes :: Web.Scotty.ScottyM ()
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.main2
                  `cast`
                (Trans
                     (<Web.Scotty.Internal.Types.ScottyState
                         Data.Text.Internal.Lazy.Text GHC.Types.IO>_R
                      ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                    <((),
                                      Web.Scotty.Internal.Types.ScottyState
                                        Data.Text.Internal.Lazy.Text GHC.Types.IO)>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <Web.Scotty.Internal.Types.ScottyState
                                       Data.Text.Internal.Lazy.Text GHC.Types.IO>_N
                                    <Data.Functor.Identity.Identity>_R
                                    <()>_N))
                          (Sym (Web.Scotty.Internal.Types.N:ScottyT[0]
                                    <Data.Text.Internal.Lazy.Text>_N <GHC.Types.IO>_N) <()>_N))) -}
34ac20ac7862fc25486bae8711800cd3
  runDb ::
    Database.Persist.Sql.Types.SqlPersist
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
      a
    -> GHC.Types.IO a
  {- Arity: 1, Strictness: <L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.runDb_g
                  `cast`
                (forall (a :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    Database.Persist.Sql.Types.Internal.SqlBackend
                    (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
                    a>_R
                 ->_R Control.Monad.Logger.N:NoLoggingT[0]
                          <GHC.Types.IO>_R <a>_N) -}
644a2100058ec6f1efcebe0a7874cab6
  runDb_g ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.Internal.SqlBackend
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Logger.NoLoggingT GHC.Types.IO))
      a
    -> Control.Monad.Logger.NoLoggingT GHC.Types.IO a
  {- Arity: 1, Strictness: <L,C(U)> -}
6d9d94a0e35e92a96ec7cbeed3917d82
  toDoDescription :: Main.ToDo -> GHC.Base.String
  RecSel Left Main.ToDo
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ToDo) ->
                 case ds of wild { Main.ToDo ds1 ds2 -> ds2 }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  toDoTitle :: Main.ToDo -> GHC.Base.String
  RecSel Left Main.ToDo
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ToDo) ->
                 case ds of wild { Main.ToDo ds1 ds2 -> ds1 }) -}
6d9d94a0e35e92a96ec7cbeed3917d82
  unToDoKey ::
    Database.Persist.Class.PersistEntity.Key Main.ToDo
    -> Database.Persist.Class.PersistStore.BackendKey
         Database.Persist.Sql.Types.Internal.SqlBackend
  RecSel Left Main.R:KeyToDo
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fToBackendKeySqlBackendToDo1
                  `cast`
                (<Database.Persist.Class.PersistEntity.Key Main.ToDo>_R
                 ->_R Trans (Main.D:R:KeyToDo0[0]) (Main.N:R:KeyToDo[0])) -}
instance GHC.Classes.Eq [Database.Persist.Class.PersistEntity.Key]
  = Main.$fEqKey
instance Web.Internal.HttpApiData.FromHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromHttpApiDataKey
instance Data.Aeson.Types.FromJSON.FromJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromJSONKey
instance GHC.Classes.Ord [Database.Persist.Class.PersistEntity.Key]
  = Main.$fOrdKey
instance Web.PathPieces.PathPiece [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPathPieceKey
instance Database.Persist.Class.PersistEntity.PersistEntity [Main.ToDo]
  = Main.$fPersistEntityToDo
instance Database.Persist.Class.PersistField.PersistField [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldKey
instance Database.Persist.Sql.Class.PersistFieldSql [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldSqlKey
instance Database.Persist.Sql.Class.PersistFieldSql [Main.ToDo]
  = Main.$fPersistFieldSqlToDo
instance Database.Persist.Class.PersistField.PersistField [Main.ToDo]
  = Main.$fPersistFieldToDo
instance GHC.Read.Read [Database.Persist.Class.PersistEntity.Key]
  = Main.$fReadKey
instance GHC.Show.Show [Database.Persist.Class.PersistEntity.Key]
  = Main.$fShowKey
instance GHC.Show.Show [Main.ToDo] = Main.$fShowToDo
instance Database.Persist.Class.PersistStore.ToBackendKey [Database.Persist.Sql.Types.Internal.SqlBackend,
                                                           Main.ToDo]
  = Main.$fToBackendKeySqlBackendToDo
instance Web.Internal.HttpApiData.ToHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToHttpApiDataKey
instance Data.Aeson.Types.ToJSON.ToJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToJSONKey
instance Data.Aeson.Types.ToJSON.ToJSON [Main.ToDo]
  = Main.$fToJSONToDo
family instance Database.Persist.Class.PersistEntity.EntityField [Main.ToDo]
  = Main.D:R:EntityFieldToDotyp0
family instance Database.Persist.Class.PersistEntity.Key [Main.ToDo]
  = Main.D:R:KeyToDo0
family instance Database.Persist.Class.PersistEntity.PersistEntityBackend [Main.ToDo]
  = Main.D:R:PersistEntityBackendToDo
family instance Database.Persist.Class.PersistEntity.Unique [Main.ToDo]
  = Main.D:R:UniqueToDo0
"SPEC/Main $fApplicativeNoLoggingT @ IO" [orphan] forall (v :: GHC.Base.Applicative
                                                                 GHC.Types.IO)
  Control.Monad.Logger.$fApplicativeNoLoggingT @ GHC.Types.IO v
  = Main.$s$fApplicativeNoLoggingT
"SPEC/Main $fApplicativeResourceT @ (NoLoggingT IO)" [orphan] forall (v :: GHC.Base.Applicative
                                                                             (Control.Monad.Logger.NoLoggingT
                                                                                GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT @ (Control.Monad.Logger.NoLoggingT
                                                                    GHC.Types.IO)
                                                               v
  = Main.$s$fApplicativeResourceT
"SPEC/Main $fFunctorNoLoggingT @ IO" [orphan] forall (v :: GHC.Base.Functor
                                                             GHC.Types.IO)
  Control.Monad.Logger.$fFunctorNoLoggingT @ GHC.Types.IO v
  = Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT
"SPEC/Main $fFunctorResourceT @ (NoLoggingT IO)" [orphan] forall (v :: GHC.Base.Functor
                                                                         (Control.Monad.Logger.NoLoggingT
                                                                            GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fFunctorResourceT @ (Control.Monad.Logger.NoLoggingT
                                                                GHC.Types.IO)
                                                           v
  = Main.$s$fApplicativeResourceT_$s$fFunctorResourceT
"SPEC/Main $fMonadIONoLoggingT @ IO" [orphan] forall (v :: Control.Monad.IO.Class.MonadIO
                                                             GHC.Types.IO)
  Control.Monad.Logger.$fMonadIONoLoggingT @ GHC.Types.IO v
  = Main.$s$fMonadIONoLoggingT
"SPEC/Main $fMonadIOResourceT @ (NoLoggingT IO)" [orphan] forall (v :: Control.Monad.IO.Class.MonadIO
                                                                         (Control.Monad.Logger.NoLoggingT
                                                                            GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT @ (Control.Monad.Logger.NoLoggingT
                                                                GHC.Types.IO)
                                                           v
  = Main.$s$fMonadIOResourceT
"SPEC/Main $fMonadIOResourceT_$cliftIO @ (NoLoggingT IO)" [orphan] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                          (Control.Monad.Logger.NoLoggingT
                                                                                             GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT_$cliftIO @ (Control.Monad.Logger.NoLoggingT
                                                                         GHC.Types.IO)
                                                                    $dMonadIO
  = Main.$s$fMonadIOResourceT_$cliftIO
"SPEC/Main $fMonadNoLoggingT @ IO" [orphan] forall (v :: GHC.Base.Monad
                                                           GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT @ GHC.Types.IO v
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT
"SPEC/Main $fMonadResourceT @ (NoLoggingT IO)" [orphan] forall (v :: GHC.Base.Monad
                                                                       (Control.Monad.Logger.NoLoggingT
                                                                          GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT @ (Control.Monad.Logger.NoLoggingT
                                                              GHC.Types.IO)
                                                         v
  = Main.$s$fMonadIOResourceT_$s$fMonadResourceT
"SPEC/Main $fMonadResourceT_$c>> @ (NoLoggingT IO)" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                  (Control.Monad.Logger.NoLoggingT
                                                                                     GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>> @ (Control.Monad.Logger.NoLoggingT
                                                                   GHC.Types.IO)
                                                              $dMonad
  = Main.$s$fMonadIOResourceT_$s$fMonadResourceT_$c>>
"SPEC/Main $fMonadResourceT_$creturn @ (NoLoggingT IO)" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                      (Control.Monad.Logger.NoLoggingT
                                                                                         GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$creturn @ (Control.Monad.Logger.NoLoggingT
                                                                       GHC.Types.IO)
                                                                  $dMonad
  = Main.$s$fMonadResourceT_$creturn
"SPEC/Main $fMonadUnliftIONoLoggingT @ IO" [orphan] forall (v :: Control.Monad.IO.Unlift.MonadUnliftIO
                                                                   GHC.Types.IO)
  Control.Monad.Logger.$fMonadUnliftIONoLoggingT @ GHC.Types.IO v
  = Main.$s$fMonadUnliftIONoLoggingT
"SPEC/Main $fMonadUnliftIONoLoggingT_$cwithRunInIO @ IO" [orphan] forall ($dMonadUnliftIO :: Control.Monad.IO.Unlift.MonadUnliftIO
                                                                                               GHC.Types.IO)
  Control.Monad.Logger.$fMonadUnliftIONoLoggingT_$cwithRunInIO @ GHC.Types.IO
                                                               $dMonadUnliftIO
  = Main.$s$fMonadUnliftIONoLoggingT_$s$fMonadUnliftIONoLoggingT_$cwithRunInIO
"SPEC/Main $fMonadUnliftIOResourceT @ (NoLoggingT IO)" [orphan] forall (v :: Control.Monad.IO.Unlift.MonadUnliftIO
                                                                               (Control.Monad.Logger.NoLoggingT
                                                                                  GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT @ (Control.Monad.Logger.NoLoggingT
                                                                      GHC.Types.IO)
                                                                 v
  = Main.$s$fMonadUnliftIOResourceT
"SPEC/Main $fMonadUnliftIOResourceT_$cwithRunInIO @ (NoLoggingT IO)" [orphan] forall ($dMonadUnliftIO :: Control.Monad.IO.Unlift.MonadUnliftIO
                                                                                                           (Control.Monad.Logger.NoLoggingT
                                                                                                              GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT_$cwithRunInIO @ (Control.Monad.Logger.NoLoggingT
                                                                                    GHC.Types.IO)
                                                                               $dMonadUnliftIO
  = Main.$s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO
"SPEC/Main fromList @ Text _" [orphan] forall @ a
                                              ($dOrd :: GHC.Classes.Ord Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = Main.$fPersistEntityToDo_$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

